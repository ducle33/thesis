ARM GAS  /tmp/cc7rScPQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.map_speed,"ax",%progbits
  18              		.align	1
  19              		.global	map_speed
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	map_speed:
  27              	.LVL0:
  28              	.LFB135:
  29              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN tail */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END tail */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "dma.h"
  23:Core/Src/main.c **** #include "tim.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** #include "gpio.h"
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** #include <stdio.h>
ARM GAS  /tmp/cc7rScPQ.s 			page 2


  30:Core/Src/main.c **** #include <string.h>
  31:Core/Src/main.c **** #include "stm32f4xx_it.h"
  32:Core/Src/main.c **** #include "stm32f4xx_hal_def.h"
  33:Core/Src/main.c **** #include "PID.h"
  34:Core/Src/main.c **** #include "config.h"
  35:Core/Src/main.c **** #include "frame_resolve.h"
  36:Core/Src/main.c **** #include "retarget.h"
  37:Core/Src/main.c **** /* USER CODE END Includes */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PTD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PD */
  46:Core/Src/main.c **** #define FALSE   0
  47:Core/Src/main.c **** #define TRUE    1
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** #define DEBUG
  50:Core/Src/main.c **** /* USER CODE END PD */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  53:Core/Src/main.c **** /* USER CODE BEGIN PM */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PM */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** // Arrays
  62:Core/Src/main.c **** uint8_t MSG[500] = "Init";
  63:Core/Src/main.c **** uint8_t linear_a[100] = "\n";
  64:Core/Src/main.c **** uint8_t angular_a[100] = "\n";
  65:Core/Src/main.c **** uint8_t rx_buffer[RX_BUFFER_SIZE];
  66:Core/Src/main.c **** uint8_t tx_buffer[TX_BUFFER_SIZE];
  67:Core/Src/main.c **** uint8_t data[8];
  68:Core/Src/main.c **** uint8_t prev_rx, last_rx;
  69:Core/Src/main.c **** // Cross processes values 
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** #ifdef TEST_HARDWARE
  72:Core/Src/main.c **** volatile uint16_t cnt = 0;
  73:Core/Src/main.c **** volatile uint16_t last_cnt = 0;
  74:Core/Src/main.c **** volatile double enc_cnt = 0.0f;
  75:Core/Src/main.c **** volatile double last_enc_cnt = 0.0f;
  76:Core/Src/main.c **** #endif
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** volatile double right_set_speed = 0.0f; // RPM
  79:Core/Src/main.c **** volatile double left_set_speed = 0.0f; // RPM
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** #ifdef ENABLE_PID
  82:Core/Src/main.c **** /* PID Init Variables */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** volatile uint32_t *RIGHT_DUTY_ADDR = &(TIM4->CCR3);
  85:Core/Src/main.c **** volatile uint32_t *RIGHT_ENCODER_ADDR = &(TIM3->CNT);
  86:Core/Src/main.c **** 
ARM GAS  /tmp/cc7rScPQ.s 			page 3


  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** double right_pid_params[3] = {RIGHT_MOTOR_KP , RIGHT_MOTOR_KI, RIGHT_MOTOR_KD};
  90:Core/Src/main.c **** double left_pid_params[3] = {LEFT_MOTOR_KP , LEFT_MOTOR_KI, LEFT_MOTOR_KD};
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** // Custom typedef
  94:Core/Src/main.c **** MOTOR_TypeDef str_right_motor;
  95:Core/Src/main.c **** PID_TypeDef str_right_pid;
  96:Core/Src/main.c **** MOTOR_TypeDef str_left_motor;
  97:Core/Src/main.c **** PID_TypeDef str_left_pid;
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** #endif
 100:Core/Src/main.c **** /* Other definitions*/
 101:Core/Src/main.c **** uint8_t ready_flag = FALSE;
 102:Core/Src/main.c **** volatile uint8_t    vel_update_flag = FALSE;
 103:Core/Src/main.c **** float linear_vel;
 104:Core/Src/main.c **** float angular_vel;
 105:Core/Src/main.c **** float last_l_vel, last_a_vel;
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* USER CODE END PV */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 110:Core/Src/main.c **** void SystemClock_Config(void);
 111:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 112:Core/Src/main.c **** void dma_rx_cplt(void);
 113:Core/Src/main.c **** void dma_rx_half_cplt(void);
 114:Core/Src/main.c **** /* USER CODE END PFP */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 117:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /* USER CODE END 0 */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /**
 122:Core/Src/main.c ****   * @brief  The application entry point.
 123:Core/Src/main.c ****   * @retval int
 124:Core/Src/main.c ****   */
 125:Core/Src/main.c **** int main(void)
 126:Core/Src/main.c **** {
 127:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* USER CODE END 1 */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 134:Core/Src/main.c ****   HAL_Init();
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE END Init */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* Configure the system clock */
 141:Core/Src/main.c ****   SystemClock_Config();
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
ARM GAS  /tmp/cc7rScPQ.s 			page 4


 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE END SysInit */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* Initialize all configured peripherals */
 148:Core/Src/main.c ****   MX_GPIO_Init();
 149:Core/Src/main.c ****   MX_DMA_Init();
 150:Core/Src/main.c ****   MX_USART1_UART_Init();
 151:Core/Src/main.c ****   MX_TIM4_Init();
 152:Core/Src/main.c ****   MX_TIM3_Init();
 153:Core/Src/main.c ****   MX_TIM5_Init();
 154:Core/Src/main.c ****   MX_TIM2_Init();
 155:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 156:Core/Src/main.c ****   RetargetInit(&huart1);
 157:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   #ifdef ENABLE_PID
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   PID_MotorInit(&str_right_motor, &str_right_pid, GPIOB, GPIO_PIN_6 , GPIO_PIN_7, 100.0f, 10.0f, &(
 162:Core/Src/main.c ****   PID_MotorInit(&str_left_motor, &str_left_pid, GPIOA, GPIO_PIN_6 , GPIO_PIN_7, 100.0f, 10.0f, &(TI
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   // Start Timer4 for PWM function on channel 3 and channel 4
 165:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 166:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   // Reset PWM Duty Cycle to zero on TIM 4 output channel 3 and channel 4
 169:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 170:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 171:Core/Src/main.c ****   
 172:Core/Src/main.c ****   // Start Timer3 for RIGHT Encoder Interfacing.
 173:Core/Src/main.c ****   HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 174:Core/Src/main.c ****   // Start Timer2 for LEFT Encoder Interfacing.
 175:Core/Src/main.c ****   HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   // Start Timer5 for sampling loop interrupt
 178:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim5);
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   #endif
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   // Last update time in tick
 183:Core/Src/main.c ****   uint32_t last_update = 0;
 184:Core/Src/main.c ****   /* USER CODE END 2 */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* Infinite loop */
 187:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 188:Core/Src/main.c ****   while (1)
 189:Core/Src/main.c ****   {
 190:Core/Src/main.c ****     /* USER CODE END WHILE */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****     if (vel_update_flag)
 196:Core/Src/main.c ****     {    
 197:Core/Src/main.c ****         resolveRxFrame(rx_buffer, &linear_vel, &angular_vel);
 198:Core/Src/main.c ****         
 199:Core/Src/main.c ****         // Convert from M/S to RPM
 200:Core/Src/main.c ****         left_set_speed = ( linear_vel - angular_vel*ROBOT_WHEEL_BASE/2 ) * 60/ ( PI * ROBOT_WHEEL_D
ARM GAS  /tmp/cc7rScPQ.s 			page 5


 201:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****         #ifdef DEBUG
 204:Core/Src/main.c ****         if (linear_vel != last_l_vel || angular_vel != last_a_vel)
 205:Core/Src/main.c ****         {
 206:Core/Src/main.c ****             sprintf((char *)MSG, "R: %.5f | L: %.5f \n", right_set_speed, left_set_speed);
 207:Core/Src/main.c ****             HAL_UART_Transmit_DMA(&huart1 ,MSG, sizeof(MSG));
 208:Core/Src/main.c ****         }
 209:Core/Src/main.c ****         // HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 210:Core/Src/main.c ****         #endif
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****         last_a_vel = angular_vel;
 213:Core/Src/main.c ****         last_l_vel = linear_vel;
 214:Core/Src/main.c ****         vel_update_flag = FALSE;
 215:Core/Src/main.c ****         last_update = HAL_GetTick();
 216:Core/Src/main.c ****     }
 217:Core/Src/main.c ****     // else 
 218:Core/Src/main.c ****     // {
 219:Core/Src/main.c ****     //     // If update timeout: 2 seconds
 220:Core/Src/main.c ****     //     // Reset speed to avoid overcontrol
 221:Core/Src/main.c ****     //     if ( (HAL_GetTick() - last_update > COMMAND_TIMEOUT_MS) && (angular_vel != 0 || linear_v
 222:Core/Src/main.c ****     //     {
 223:Core/Src/main.c ****     //         angular_vel = 0;
 224:Core/Src/main.c ****     //         linear_vel = 0;
 225:Core/Src/main.c ****     //         #ifdef DEBUG
 226:Core/Src/main.c ****     //         // printf("Vel : %.5f  | %.5f \n", linear_vel, angular_vel);
 227:Core/Src/main.c ****     //         // sprintf((char *)MSG, "L: %.5f | A: %.5f \n", linear_vel, angular_vel);
 228:Core/Src/main.c ****     //         // HAL_UART_Transmit_DMA(&huart1 ,MSG, sizeof(MSG));
 229:Core/Src/main.c ****     //         #endif
 230:Core/Src/main.c ****     //     }
 231:Core/Src/main.c ****     // }
 232:Core/Src/main.c ****     // HAL_Delay(100);
 233:Core/Src/main.c ****   }
 234:Core/Src/main.c ****   /* USER CODE END 3 */
 235:Core/Src/main.c **** }
 236:Core/Src/main.c **** 
 237:Core/Src/main.c **** /**
 238:Core/Src/main.c ****   * @brief System Clock Configuration
 239:Core/Src/main.c ****   * @retval None
 240:Core/Src/main.c ****   */
 241:Core/Src/main.c **** void SystemClock_Config(void)
 242:Core/Src/main.c **** {
 243:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 244:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 247:Core/Src/main.c ****   */
 248:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 249:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 250:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 251:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 252:Core/Src/main.c ****   */
 253:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 254:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 257:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
ARM GAS  /tmp/cc7rScPQ.s 			page 6


 258:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 259:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 260:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 261:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 262:Core/Src/main.c ****   {
 263:Core/Src/main.c ****     Error_Handler();
 264:Core/Src/main.c ****   }
 265:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 268:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 269:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 270:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 271:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 272:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 275:Core/Src/main.c ****   {
 276:Core/Src/main.c ****     Error_Handler();
 277:Core/Src/main.c ****   }
 278:Core/Src/main.c **** }
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c **** void map_speed(float a_vel, float l_vel, double *r_set_rpm, double *r_set_lpm)
 283:Core/Src/main.c **** {
  30              		.loc 1 283 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 284:Core/Src/main.c ****     __NOP();
  35              		.loc 1 284 5 view .LVU1
  36              		.syntax unified
  37              	@ 284 "Core/Src/main.c" 1
  38 0000 00BF     		nop
  39              	@ 0 "" 2
 285:Core/Src/main.c **** }
  40              		.loc 1 285 1 is_stmt 0 view .LVU2
  41              		.thumb
  42              		.syntax unified
  43 0002 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE135:
  47              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  48              		.align	1
  49              		.global	HAL_TIM_PeriodElapsedCallback
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu fpv4-sp-d16
  55              	HAL_TIM_PeriodElapsedCallback:
  56              	.LVL1:
  57              	.LFB136:
 286:Core/Src/main.c **** 
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
ARM GAS  /tmp/cc7rScPQ.s 			page 7


 289:Core/Src/main.c **** {
  58              		.loc 1 289 1 is_stmt 1 view -0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
 290:Core/Src/main.c ****   if (htim == &htim5)
  62              		.loc 1 290 3 view .LVU4
  63              		.loc 1 290 6 is_stmt 0 view .LVU5
  64 0000 0F4B     		ldr	r3, .L9
  65 0002 8342     		cmp	r3, r0
  66 0004 00D0     		beq	.L8
  67 0006 7047     		bx	lr
  68              	.L8:
 289:Core/Src/main.c ****   if (htim == &htim5)
  69              		.loc 1 289 1 view .LVU6
  70 0008 10B5     		push	{r4, lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     #ifdef TEST_HARDWARE
 293:Core/Src/main.c ****     // Do sampling and calculate stuff
 294:Core/Src/main.c ****     cnt++;
 295:Core/Src/main.c ****     if (cnt == 100)
 296:Core/Src/main.c ****     {
 297:Core/Src/main.c ****         
 298:Core/Src/main.c ****         enc_cnt = TIM3->CNT;
 299:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 300:Core/Src/main.c ****         if (enc_cnt!=last_enc_cnt)
 301:Core/Src/main.c ****         {
 302:Core/Src/main.c ****           sprintf((char *)period, "-> %d pulses/sec\n", (enc_cnt-last_enc_cnt));
 303:Core/Src/main.c ****           HAL_UART_Transmit_DMA(&huart1, period, sizeof(period));
 304:Core/Src/main.c ****         }
 305:Core/Src/main.c ****         cnt = 0;
 306:Core/Src/main.c ****         last_enc_cnt = enc_cnt;
 307:Core/Src/main.c ****         
 308:Core/Src/main.c ****     }
 309:Core/Src/main.c ****     #endif
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****     #ifdef ENABLE_PID
 312:Core/Src/main.c ****     /* =================
 313:Core/Src/main.c ****     * MAIN PID CLOSE-LOOP SAMPLING AND COMPUTE
 314:Core/Src/main.c ****     *  =================== */
 315:Core/Src/main.c ****     // RIGHT MOTOR PI CONTROL 
 316:Core/Src/main.c ****     PID_PreProcess(&str_right_motor, right_set_speed);
  75              		.loc 1 316 5 is_stmt 1 view .LVU7
  76 000a 0E4C     		ldr	r4, .L9+4
  77 000c 0E4B     		ldr	r3, .L9+8
  78 000e 93ED000B 		vldr.64	d0, [r3]
  79 0012 2046     		mov	r0, r4
  80              	.LVL2:
  81              		.loc 1 316 5 is_stmt 0 view .LVU8
  82 0014 FFF7FEFF 		bl	PID_PreProcess
  83              	.LVL3:
 317:Core/Src/main.c ****     PID_ComputeOutput(&str_right_motor);
  84              		.loc 1 317 5 is_stmt 1 view .LVU9
ARM GAS  /tmp/cc7rScPQ.s 			page 8


  85 0018 2046     		mov	r0, r4
  86 001a FFF7FEFF 		bl	PID_ComputeOutput
  87              	.LVL4:
 318:Core/Src/main.c ****     PID_SetDuty(&str_right_motor );
  88              		.loc 1 318 5 view .LVU10
  89 001e 2046     		mov	r0, r4
  90 0020 FFF7FEFF 		bl	PID_SetDuty
  91              	.LVL5:
 319:Core/Src/main.c ****     PID_PreProcess(&str_left_motor, left_set_speed);
  92              		.loc 1 319 5 view .LVU11
  93 0024 094C     		ldr	r4, .L9+12
  94 0026 0A4B     		ldr	r3, .L9+16
  95 0028 93ED000B 		vldr.64	d0, [r3]
  96 002c 2046     		mov	r0, r4
  97 002e FFF7FEFF 		bl	PID_PreProcess
  98              	.LVL6:
 320:Core/Src/main.c ****     PID_ComputeOutput(&str_left_motor);
  99              		.loc 1 320 5 view .LVU12
 100 0032 2046     		mov	r0, r4
 101 0034 FFF7FEFF 		bl	PID_ComputeOutput
 102              	.LVL7:
 321:Core/Src/main.c ****     PID_SetDuty(&str_left_motor );
 103              		.loc 1 321 5 view .LVU13
 104 0038 2046     		mov	r0, r4
 105 003a FFF7FEFF 		bl	PID_SetDuty
 106              	.LVL8:
 322:Core/Src/main.c ****     #else 
 323:Core/Src/main.c ****     __NOP();
 324:Core/Src/main.c ****     #endif
 325:Core/Src/main.c ****   }
 326:Core/Src/main.c **** }
 107              		.loc 1 326 1 is_stmt 0 view .LVU14
 108 003e 10BD     		pop	{r4, pc}
 109              	.L10:
 110              		.align	2
 111              	.L9:
 112 0040 00000000 		.word	htim5
 113 0044 00000000 		.word	str_right_motor
 114 0048 00000000 		.word	.LANCHOR0
 115 004c 00000000 		.word	str_left_motor
 116 0050 00000000 		.word	.LANCHOR1
 117              		.cfi_endproc
 118              	.LFE136:
 120              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 121              		.align	1
 122              		.global	HAL_UART_RxCpltCallback
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv4-sp-d16
 128              	HAL_UART_RxCpltCallback:
 129              	.LVL9:
 130              	.LFB137:
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** 
 329:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 330:Core/Src/main.c **** {
ARM GAS  /tmp/cc7rScPQ.s 			page 9


 131              		.loc 1 330 1 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		.loc 1 330 1 is_stmt 0 view .LVU16
 136 0000 08B5     		push	{r3, lr}
 137              	.LCFI1:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 3, -8
 140              		.cfi_offset 14, -4
 331:Core/Src/main.c ****     
 332:Core/Src/main.c ****     if (ready_flag == TRUE)
 141              		.loc 1 332 5 is_stmt 1 view .LVU17
 142              		.loc 1 332 20 is_stmt 0 view .LVU18
 143 0002 1B4B     		ldr	r3, .L18
 144 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 145              		.loc 1 332 8 view .LVU19
 146 0006 012B     		cmp	r3, #1
 147 0008 14D0     		beq	.L16
 333:Core/Src/main.c ****     {
 334:Core/Src/main.c ****         vel_update_flag = TRUE;
 335:Core/Src/main.c ****         ready_flag = FALSE;
 336:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 337:Core/Src/main.c ****     }
 338:Core/Src/main.c ****     else
 339:Core/Src/main.c ****     {
 340:Core/Src/main.c ****         if (rx_buffer[0] == 0x16 && prev_rx == 0x16 && last_rx == 0x16) // SYN
 148              		.loc 1 340 9 is_stmt 1 view .LVU20
 149              		.loc 1 340 22 is_stmt 0 view .LVU21
 150 000a 1A4B     		ldr	r3, .L18+4
 151 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 152              		.loc 1 340 12 view .LVU22
 153 000e 162B     		cmp	r3, #22
 154 0010 03D1     		bne	.L14
 155              		.loc 1 340 45 discriminator 1 view .LVU23
 156 0012 194B     		ldr	r3, .L18+8
 157 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 158              		.loc 1 340 34 discriminator 1 view .LVU24
 159 0016 162B     		cmp	r3, #22
 160 0018 17D0     		beq	.L17
 161              	.L14:
 341:Core/Src/main.c ****         {
 342:Core/Src/main.c ****             ready_flag = TRUE;
 343:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 344:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE);   
 345:Core/Src/main.c ****         }
 346:Core/Src/main.c ****         else
 347:Core/Src/main.c ****         {
 348:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 162              		.loc 1 348 13 is_stmt 1 view .LVU25
 163 001a 0122     		movs	r2, #1
 164 001c 1549     		ldr	r1, .L18+4
 165 001e 1748     		ldr	r0, .L18+12
 166              	.LVL10:
 167              		.loc 1 348 13 is_stmt 0 view .LVU26
 168 0020 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 169              	.LVL11:
ARM GAS  /tmp/cc7rScPQ.s 			page 10


 170              	.L13:
 349:Core/Src/main.c ****         }
 350:Core/Src/main.c ****     } 
 351:Core/Src/main.c ****     last_rx = prev_rx;
 171              		.loc 1 351 5 is_stmt 1 view .LVU27
 172              		.loc 1 351 13 is_stmt 0 view .LVU28
 173 0024 144B     		ldr	r3, .L18+8
 174 0026 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 175 0028 154A     		ldr	r2, .L18+16
 176 002a 1170     		strb	r1, [r2]
 352:Core/Src/main.c ****     prev_rx = rx_buffer[0];
 177              		.loc 1 352 5 is_stmt 1 view .LVU29
 178              		.loc 1 352 24 is_stmt 0 view .LVU30
 179 002c 114A     		ldr	r2, .L18+4
 180 002e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 181              		.loc 1 352 13 view .LVU31
 182 0030 1A70     		strb	r2, [r3]
 353:Core/Src/main.c **** }
 183              		.loc 1 353 1 view .LVU32
 184 0032 08BD     		pop	{r3, pc}
 185              	.LVL12:
 186              	.L16:
 334:Core/Src/main.c ****         ready_flag = FALSE;
 187              		.loc 1 334 9 is_stmt 1 view .LVU33
 334:Core/Src/main.c ****         ready_flag = FALSE;
 188              		.loc 1 334 25 is_stmt 0 view .LVU34
 189 0034 0122     		movs	r2, #1
 190 0036 134B     		ldr	r3, .L18+20
 191 0038 1A70     		strb	r2, [r3]
 335:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 192              		.loc 1 335 9 is_stmt 1 view .LVU35
 335:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 193              		.loc 1 335 20 is_stmt 0 view .LVU36
 194 003a 0D4B     		ldr	r3, .L18
 195 003c 0021     		movs	r1, #0
 196 003e 1970     		strb	r1, [r3]
 336:Core/Src/main.c ****     }
 197              		.loc 1 336 9 is_stmt 1 view .LVU37
 198 0040 0C49     		ldr	r1, .L18+4
 199 0042 0E48     		ldr	r0, .L18+12
 200              	.LVL13:
 336:Core/Src/main.c ****     }
 201              		.loc 1 336 9 is_stmt 0 view .LVU38
 202 0044 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 203              	.LVL14:
 204 0048 ECE7     		b	.L13
 205              	.LVL15:
 206              	.L17:
 340:Core/Src/main.c ****         {
 207              		.loc 1 340 64 discriminator 2 view .LVU39
 208 004a 0D4B     		ldr	r3, .L18+16
 209 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 340:Core/Src/main.c ****         {
 210              		.loc 1 340 53 discriminator 2 view .LVU40
 211 004e 162B     		cmp	r3, #22
 212 0050 E3D1     		bne	.L14
 342:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
ARM GAS  /tmp/cc7rScPQ.s 			page 11


 213              		.loc 1 342 13 is_stmt 1 view .LVU41
 342:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 214              		.loc 1 342 24 is_stmt 0 view .LVU42
 215 0052 074B     		ldr	r3, .L18
 216 0054 0122     		movs	r2, #1
 217 0056 1A70     		strb	r2, [r3]
 343:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE);   
 218              		.loc 1 343 13 is_stmt 1 view .LVU43
 219 0058 0649     		ldr	r1, .L18+4
 220 005a 0023     		movs	r3, #0
 221 005c 0B60     		str	r3, [r1]	@ unaligned
 222 005e 4B60     		str	r3, [r1, #4]	@ unaligned
 223 0060 8B60     		str	r3, [r1, #8]	@ unaligned
 224 0062 CB60     		str	r3, [r1, #12]	@ unaligned
 344:Core/Src/main.c ****         }
 225              		.loc 1 344 13 view .LVU44
 226 0064 1022     		movs	r2, #16
 227 0066 0548     		ldr	r0, .L18+12
 228              	.LVL16:
 344:Core/Src/main.c ****         }
 229              		.loc 1 344 13 is_stmt 0 view .LVU45
 230 0068 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 231              	.LVL17:
 232 006c DAE7     		b	.L13
 233              	.L19:
 234 006e 00BF     		.align	2
 235              	.L18:
 236 0070 00000000 		.word	.LANCHOR2
 237 0074 00000000 		.word	rx_buffer
 238 0078 00000000 		.word	prev_rx
 239 007c 00000000 		.word	huart1
 240 0080 00000000 		.word	last_rx
 241 0084 00000000 		.word	.LANCHOR3
 242              		.cfi_endproc
 243              	.LFE137:
 245              		.section	.text.dma_rx_cplt,"ax",%progbits
 246              		.align	1
 247              		.global	dma_rx_cplt
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	dma_rx_cplt:
 254              	.LFB138:
 354:Core/Src/main.c **** 
 355:Core/Src/main.c **** void dma_rx_cplt()
 356:Core/Src/main.c **** {
 255              		.loc 1 356 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
 357:Core/Src/main.c ****     __NOP();
 260              		.loc 1 357 5 view .LVU47
 261              		.syntax unified
 262              	@ 357 "Core/Src/main.c" 1
 263 0000 00BF     		nop
ARM GAS  /tmp/cc7rScPQ.s 			page 12


 264              	@ 0 "" 2
 358:Core/Src/main.c **** }
 265              		.loc 1 358 1 is_stmt 0 view .LVU48
 266              		.thumb
 267              		.syntax unified
 268 0002 7047     		bx	lr
 269              		.cfi_endproc
 270              	.LFE138:
 272              		.section	.text.dma_rx_half_cplt,"ax",%progbits
 273              		.align	1
 274              		.global	dma_rx_half_cplt
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	dma_rx_half_cplt:
 281              	.LFB139:
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** void dma_rx_half_cplt()
 361:Core/Src/main.c **** {
 282              		.loc 1 361 1 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 362:Core/Src/main.c ****     __NOP();
 287              		.loc 1 362 5 view .LVU50
 288              		.syntax unified
 289              	@ 362 "Core/Src/main.c" 1
 290 0000 00BF     		nop
 291              	@ 0 "" 2
 363:Core/Src/main.c **** }
 292              		.loc 1 363 1 is_stmt 0 view .LVU51
 293              		.thumb
 294              		.syntax unified
 295 0002 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE139:
 299              		.section	.text.Error_Handler,"ax",%progbits
 300              		.align	1
 301              		.global	Error_Handler
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	Error_Handler:
 308              	.LFB140:
 364:Core/Src/main.c **** 
 365:Core/Src/main.c **** /* USER CODE END 4 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c **** /**
 368:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 369:Core/Src/main.c ****   * @retval None
 370:Core/Src/main.c ****   */
 371:Core/Src/main.c **** void Error_Handler(void)
 372:Core/Src/main.c **** {
 309              		.loc 1 372 1 is_stmt 1 view -0
ARM GAS  /tmp/cc7rScPQ.s 			page 13


 310              		.cfi_startproc
 311              		@ Volatile: function does not return.
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 373:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 374:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 375:Core/Src/main.c ****   __disable_irq();
 315              		.loc 1 375 3 view .LVU53
 316              	.LBB4:
 317              	.LBI4:
 318              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc7rScPQ.s 			page 14


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  /tmp/cc7rScPQ.s 			page 15


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 319              		.loc 2 140 27 view .LVU54
 320              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 321              		.loc 2 142 3 view .LVU55
 322              		.syntax unified
 323              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 324 0000 72B6     		cpsid i
 325              	@ 0 "" 2
 326              		.thumb
 327              		.syntax unified
 328              	.L23:
 329              	.LBE5:
 330              	.LBE4:
 376:Core/Src/main.c ****   while (1)
 331              		.loc 1 376 3 discriminator 1 view .LVU56
 377:Core/Src/main.c ****   {
 378:Core/Src/main.c ****   }
 332              		.loc 1 378 3 discriminator 1 view .LVU57
ARM GAS  /tmp/cc7rScPQ.s 			page 16


 376:Core/Src/main.c ****   while (1)
 333              		.loc 1 376 9 discriminator 1 view .LVU58
 334 0002 FEE7     		b	.L23
 335              		.cfi_endproc
 336              	.LFE140:
 338              		.section	.text.SystemClock_Config,"ax",%progbits
 339              		.align	1
 340              		.global	SystemClock_Config
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	SystemClock_Config:
 347              	.LFB134:
 242:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 348              		.loc 1 242 1 view -0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 80
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352 0000 00B5     		push	{lr}
 353              	.LCFI2:
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 14, -4
 356 0002 95B0     		sub	sp, sp, #84
 357              	.LCFI3:
 358              		.cfi_def_cfa_offset 88
 243:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 359              		.loc 1 243 3 view .LVU60
 243:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 360              		.loc 1 243 22 is_stmt 0 view .LVU61
 361 0004 3022     		movs	r2, #48
 362 0006 0021     		movs	r1, #0
 363 0008 08A8     		add	r0, sp, #32
 364 000a FFF7FEFF 		bl	memset
 365              	.LVL18:
 244:Core/Src/main.c **** 
 366              		.loc 1 244 3 is_stmt 1 view .LVU62
 244:Core/Src/main.c **** 
 367              		.loc 1 244 22 is_stmt 0 view .LVU63
 368 000e 0023     		movs	r3, #0
 369 0010 0393     		str	r3, [sp, #12]
 370 0012 0493     		str	r3, [sp, #16]
 371 0014 0593     		str	r3, [sp, #20]
 372 0016 0693     		str	r3, [sp, #24]
 373 0018 0793     		str	r3, [sp, #28]
 248:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 374              		.loc 1 248 3 is_stmt 1 view .LVU64
 375              	.LBB6:
 248:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 376              		.loc 1 248 3 view .LVU65
 377 001a 0193     		str	r3, [sp, #4]
 248:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 378              		.loc 1 248 3 view .LVU66
 379 001c 204A     		ldr	r2, .L30
 380 001e 116C     		ldr	r1, [r2, #64]
 381 0020 41F08051 		orr	r1, r1, #268435456
 382 0024 1164     		str	r1, [r2, #64]
ARM GAS  /tmp/cc7rScPQ.s 			page 17


 248:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 383              		.loc 1 248 3 view .LVU67
 384 0026 126C     		ldr	r2, [r2, #64]
 385 0028 02F08052 		and	r2, r2, #268435456
 386 002c 0192     		str	r2, [sp, #4]
 248:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 387              		.loc 1 248 3 view .LVU68
 388 002e 019A     		ldr	r2, [sp, #4]
 389              	.LBE6:
 248:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 390              		.loc 1 248 3 view .LVU69
 249:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 391              		.loc 1 249 3 view .LVU70
 392              	.LBB7:
 249:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 393              		.loc 1 249 3 view .LVU71
 394 0030 0293     		str	r3, [sp, #8]
 249:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 395              		.loc 1 249 3 view .LVU72
 396 0032 1C4B     		ldr	r3, .L30+4
 397 0034 1A68     		ldr	r2, [r3]
 398 0036 42F48042 		orr	r2, r2, #16384
 399 003a 1A60     		str	r2, [r3]
 249:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 400              		.loc 1 249 3 view .LVU73
 401 003c 1B68     		ldr	r3, [r3]
 402 003e 03F48043 		and	r3, r3, #16384
 403 0042 0293     		str	r3, [sp, #8]
 249:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 404              		.loc 1 249 3 view .LVU74
 405 0044 029B     		ldr	r3, [sp, #8]
 406              	.LBE7:
 249:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 407              		.loc 1 249 3 view .LVU75
 253:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 408              		.loc 1 253 3 view .LVU76
 253:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 409              		.loc 1 253 36 is_stmt 0 view .LVU77
 410 0046 0123     		movs	r3, #1
 411 0048 0893     		str	r3, [sp, #32]
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 412              		.loc 1 254 3 is_stmt 1 view .LVU78
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 413              		.loc 1 254 30 is_stmt 0 view .LVU79
 414 004a 4FF48033 		mov	r3, #65536
 415 004e 0993     		str	r3, [sp, #36]
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 416              		.loc 1 255 3 is_stmt 1 view .LVU80
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 417              		.loc 1 255 34 is_stmt 0 view .LVU81
 418 0050 0222     		movs	r2, #2
 419 0052 0E92     		str	r2, [sp, #56]
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 420              		.loc 1 256 3 is_stmt 1 view .LVU82
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 421              		.loc 1 256 35 is_stmt 0 view .LVU83
 422 0054 4FF48003 		mov	r3, #4194304
ARM GAS  /tmp/cc7rScPQ.s 			page 18


 423 0058 0F93     		str	r3, [sp, #60]
 257:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 424              		.loc 1 257 3 is_stmt 1 view .LVU84
 257:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 425              		.loc 1 257 30 is_stmt 0 view .LVU85
 426 005a 0423     		movs	r3, #4
 427 005c 1093     		str	r3, [sp, #64]
 258:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 428              		.loc 1 258 3 is_stmt 1 view .LVU86
 258:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 429              		.loc 1 258 30 is_stmt 0 view .LVU87
 430 005e A821     		movs	r1, #168
 431 0060 1191     		str	r1, [sp, #68]
 259:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 432              		.loc 1 259 3 is_stmt 1 view .LVU88
 259:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 433              		.loc 1 259 30 is_stmt 0 view .LVU89
 434 0062 1292     		str	r2, [sp, #72]
 260:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 435              		.loc 1 260 3 is_stmt 1 view .LVU90
 260:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 436              		.loc 1 260 30 is_stmt 0 view .LVU91
 437 0064 1393     		str	r3, [sp, #76]
 261:Core/Src/main.c ****   {
 438              		.loc 1 261 3 is_stmt 1 view .LVU92
 261:Core/Src/main.c ****   {
 439              		.loc 1 261 7 is_stmt 0 view .LVU93
 440 0066 08A8     		add	r0, sp, #32
 441 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 442              	.LVL19:
 261:Core/Src/main.c ****   {
 443              		.loc 1 261 6 view .LVU94
 444 006c 98B9     		cbnz	r0, .L28
 267:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 445              		.loc 1 267 3 is_stmt 1 view .LVU95
 267:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 446              		.loc 1 267 31 is_stmt 0 view .LVU96
 447 006e 0F23     		movs	r3, #15
 448 0070 0393     		str	r3, [sp, #12]
 269:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 449              		.loc 1 269 3 is_stmt 1 view .LVU97
 269:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 450              		.loc 1 269 34 is_stmt 0 view .LVU98
 451 0072 0223     		movs	r3, #2
 452 0074 0493     		str	r3, [sp, #16]
 270:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 453              		.loc 1 270 3 is_stmt 1 view .LVU99
 270:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 454              		.loc 1 270 35 is_stmt 0 view .LVU100
 455 0076 0023     		movs	r3, #0
 456 0078 0593     		str	r3, [sp, #20]
 271:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 457              		.loc 1 271 3 is_stmt 1 view .LVU101
 271:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 458              		.loc 1 271 36 is_stmt 0 view .LVU102
 459 007a 4FF4A053 		mov	r3, #5120
 460 007e 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/cc7rScPQ.s 			page 19


 272:Core/Src/main.c **** 
 461              		.loc 1 272 3 is_stmt 1 view .LVU103
 272:Core/Src/main.c **** 
 462              		.loc 1 272 36 is_stmt 0 view .LVU104
 463 0080 4FF48053 		mov	r3, #4096
 464 0084 0793     		str	r3, [sp, #28]
 274:Core/Src/main.c ****   {
 465              		.loc 1 274 3 is_stmt 1 view .LVU105
 274:Core/Src/main.c ****   {
 466              		.loc 1 274 7 is_stmt 0 view .LVU106
 467 0086 0521     		movs	r1, #5
 468 0088 03A8     		add	r0, sp, #12
 469 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 470              	.LVL20:
 274:Core/Src/main.c ****   {
 471              		.loc 1 274 6 view .LVU107
 472 008e 20B9     		cbnz	r0, .L29
 278:Core/Src/main.c **** 
 473              		.loc 1 278 1 view .LVU108
 474 0090 15B0     		add	sp, sp, #84
 475              	.LCFI4:
 476              		.cfi_remember_state
 477              		.cfi_def_cfa_offset 4
 478              		@ sp needed
 479 0092 5DF804FB 		ldr	pc, [sp], #4
 480              	.L28:
 481              	.LCFI5:
 482              		.cfi_restore_state
 263:Core/Src/main.c ****   }
 483              		.loc 1 263 5 is_stmt 1 view .LVU109
 484 0096 FFF7FEFF 		bl	Error_Handler
 485              	.LVL21:
 486              	.L29:
 276:Core/Src/main.c ****   }
 487              		.loc 1 276 5 view .LVU110
 488 009a FFF7FEFF 		bl	Error_Handler
 489              	.LVL22:
 490              	.L31:
 491 009e 00BF     		.align	2
 492              	.L30:
 493 00a0 00380240 		.word	1073887232
 494 00a4 00700040 		.word	1073770496
 495              		.cfi_endproc
 496              	.LFE134:
 498              		.global	__aeabi_f2d
 499              		.global	__aeabi_ddiv
 500              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 501              		.align	2
 502              	.LC0:
 503 0000 523A2025 		.ascii	"R: %.5f | L: %.5f \012\000"
 503      2E356620 
 503      7C204C3A 
 503      20252E35 
 503      66200A00 
 504              		.section	.text.main,"ax",%progbits
 505              		.align	1
 506              		.global	main
ARM GAS  /tmp/cc7rScPQ.s 			page 20


 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu fpv4-sp-d16
 512              	main:
 513              	.LFB133:
 126:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 514              		.loc 1 126 1 view -0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518 0000 30B5     		push	{r4, r5, lr}
 519              	.LCFI6:
 520              		.cfi_def_cfa_offset 12
 521              		.cfi_offset 4, -12
 522              		.cfi_offset 5, -8
 523              		.cfi_offset 14, -4
 524 0002 2DED048B 		vpush.64	{d8, d9}
 525              	.LCFI7:
 526              		.cfi_def_cfa_offset 28
 527              		.cfi_offset 80, -28
 528              		.cfi_offset 81, -24
 529              		.cfi_offset 82, -20
 530              		.cfi_offset 83, -16
 531 0006 85B0     		sub	sp, sp, #20
 532              	.LCFI8:
 533              		.cfi_def_cfa_offset 48
 134:Core/Src/main.c **** 
 534              		.loc 1 134 3 view .LVU112
 535 0008 FFF7FEFF 		bl	HAL_Init
 536              	.LVL23:
 141:Core/Src/main.c **** 
 537              		.loc 1 141 3 view .LVU113
 538 000c FFF7FEFF 		bl	SystemClock_Config
 539              	.LVL24:
 148:Core/Src/main.c ****   MX_DMA_Init();
 540              		.loc 1 148 3 view .LVU114
 541 0010 FFF7FEFF 		bl	MX_GPIO_Init
 542              	.LVL25:
 149:Core/Src/main.c ****   MX_USART1_UART_Init();
 543              		.loc 1 149 3 view .LVU115
 544 0014 FFF7FEFF 		bl	MX_DMA_Init
 545              	.LVL26:
 150:Core/Src/main.c ****   MX_TIM4_Init();
 546              		.loc 1 150 3 view .LVU116
 547 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 548              	.LVL27:
 151:Core/Src/main.c ****   MX_TIM3_Init();
 549              		.loc 1 151 3 view .LVU117
 550 001c FFF7FEFF 		bl	MX_TIM4_Init
 551              	.LVL28:
 152:Core/Src/main.c ****   MX_TIM5_Init();
 552              		.loc 1 152 3 view .LVU118
 553 0020 FFF7FEFF 		bl	MX_TIM3_Init
 554              	.LVL29:
 153:Core/Src/main.c ****   MX_TIM2_Init();
 555              		.loc 1 153 3 view .LVU119
ARM GAS  /tmp/cc7rScPQ.s 			page 21


 556 0024 FFF7FEFF 		bl	MX_TIM5_Init
 557              	.LVL30:
 154:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 558              		.loc 1 154 3 view .LVU120
 559 0028 FFF7FEFF 		bl	MX_TIM2_Init
 560              	.LVL31:
 156:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 561              		.loc 1 156 3 view .LVU121
 562 002c 644C     		ldr	r4, .L38+24
 563 002e 2046     		mov	r0, r4
 564 0030 FFF7FEFF 		bl	RetargetInit
 565              	.LVL32:
 157:Core/Src/main.c **** 
 566              		.loc 1 157 3 view .LVU122
 567 0034 0122     		movs	r2, #1
 568 0036 6349     		ldr	r1, .L38+28
 569 0038 2046     		mov	r0, r4
 570 003a FFF7FEFF 		bl	HAL_UART_Receive_DMA
 571              	.LVL33:
 161:Core/Src/main.c ****   PID_MotorInit(&str_left_motor, &str_left_pid, GPIOA, GPIO_PIN_6 , GPIO_PIN_7, 100.0f, 10.0f, &(TI
 572              		.loc 1 161 3 view .LVU123
 573 003e 9FED5A9B 		vldr.64	d9, .L38
 574 0042 9FED5B8B 		vldr.64	d8, .L38+8
 575 0046 604B     		ldr	r3, .L38+32
 576 0048 0393     		str	r3, [sp, #12]
 577 004a 604B     		ldr	r3, .L38+36
 578 004c 0293     		str	r3, [sp, #8]
 579 004e A3F58363 		sub	r3, r3, #1048
 580 0052 0193     		str	r3, [sp, #4]
 581 0054 8024     		movs	r4, #128
 582 0056 0094     		str	r4, [sp]
 583 0058 B0EE491A 		vmov.f32	s2, s18
 584 005c F0EE691A 		vmov.f32	s3, s19
 585 0060 B0EE480A 		vmov.f32	s0, s16
 586 0064 F0EE680A 		vmov.f32	s1, s17
 587 0068 4023     		movs	r3, #64
 588 006a 594A     		ldr	r2, .L38+40
 589 006c 5949     		ldr	r1, .L38+44
 590 006e 5A48     		ldr	r0, .L38+48
 591 0070 FFF7FEFF 		bl	PID_MotorInit
 592              	.LVL34:
 162:Core/Src/main.c **** 
 593              		.loc 1 162 3 view .LVU124
 594 0074 594B     		ldr	r3, .L38+52
 595 0076 0393     		str	r3, [sp, #12]
 596 0078 594B     		ldr	r3, .L38+56
 597 007a 0293     		str	r3, [sp, #8]
 598 007c A3F61C03 		subw	r3, r3, #2076
 599 0080 0193     		str	r3, [sp, #4]
 600 0082 0094     		str	r4, [sp]
 601 0084 B0EE491A 		vmov.f32	s2, s18
 602 0088 F0EE691A 		vmov.f32	s3, s19
 603 008c B0EE480A 		vmov.f32	s0, s16
 604 0090 F0EE680A 		vmov.f32	s1, s17
 605 0094 4023     		movs	r3, #64
 606 0096 534A     		ldr	r2, .L38+60
 607 0098 5349     		ldr	r1, .L38+64
ARM GAS  /tmp/cc7rScPQ.s 			page 22


 608 009a 5448     		ldr	r0, .L38+68
 609 009c FFF7FEFF 		bl	PID_MotorInit
 610              	.LVL35:
 165:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 611              		.loc 1 165 3 view .LVU125
 612 00a0 534C     		ldr	r4, .L38+72
 613 00a2 0821     		movs	r1, #8
 614 00a4 2046     		mov	r0, r4
 615 00a6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 616              	.LVL36:
 166:Core/Src/main.c **** 
 617              		.loc 1 166 3 view .LVU126
 618 00aa 0C21     		movs	r1, #12
 619 00ac 2046     		mov	r0, r4
 620 00ae FFF7FEFF 		bl	HAL_TIM_PWM_Start
 621              	.LVL37:
 169:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 622              		.loc 1 169 3 view .LVU127
 623 00b2 2368     		ldr	r3, [r4]
 624 00b4 0022     		movs	r2, #0
 625 00b6 DA63     		str	r2, [r3, #60]
 170:Core/Src/main.c ****   
 626              		.loc 1 170 3 view .LVU128
 627 00b8 1A64     		str	r2, [r3, #64]
 173:Core/Src/main.c ****   // Start Timer2 for LEFT Encoder Interfacing.
 628              		.loc 1 173 3 view .LVU129
 629 00ba 3C21     		movs	r1, #60
 630 00bc 4D48     		ldr	r0, .L38+76
 631 00be FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 632              	.LVL38:
 175:Core/Src/main.c **** 
 633              		.loc 1 175 3 view .LVU130
 634 00c2 3C21     		movs	r1, #60
 635 00c4 4C48     		ldr	r0, .L38+80
 636 00c6 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 637              	.LVL39:
 178:Core/Src/main.c **** 
 638              		.loc 1 178 3 view .LVU131
 639 00ca 4C48     		ldr	r0, .L38+84
 640 00cc FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 641              	.LVL40:
 183:Core/Src/main.c ****   /* USER CODE END 2 */
 642              		.loc 1 183 3 view .LVU132
 183:Core/Src/main.c ****   /* USER CODE END 2 */
 643              		.loc 1 183 3 is_stmt 0 view .LVU133
 644 00d0 1FE0     		b	.L33
 645              	.LVL41:
 646              	.L34:
 206:Core/Src/main.c ****             HAL_UART_Transmit_DMA(&huart1 ,MSG, sizeof(MSG));
 647              		.loc 1 206 13 is_stmt 1 view .LVU134
 648 00d2 4B4B     		ldr	r3, .L38+88
 649 00d4 D3E90023 		ldrd	r2, [r3]
 650 00d8 4A49     		ldr	r1, .L38+92
 651 00da D1E90001 		ldrd	r0, [r1]
 652 00de 4A4C     		ldr	r4, .L38+96
 653 00e0 CDE90001 		strd	r0, [sp]
 654 00e4 4949     		ldr	r1, .L38+100
ARM GAS  /tmp/cc7rScPQ.s 			page 23


 655 00e6 2046     		mov	r0, r4
 656 00e8 FFF7FEFF 		bl	sprintf
 657              	.LVL42:
 207:Core/Src/main.c ****         }
 658              		.loc 1 207 13 view .LVU135
 659 00ec 4FF4FA72 		mov	r2, #500
 660 00f0 2146     		mov	r1, r4
 661 00f2 3348     		ldr	r0, .L38+24
 662 00f4 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 663              	.LVL43:
 664              	.L35:
 212:Core/Src/main.c ****         last_l_vel = linear_vel;
 665              		.loc 1 212 9 view .LVU136
 212:Core/Src/main.c ****         last_l_vel = linear_vel;
 666              		.loc 1 212 20 is_stmt 0 view .LVU137
 667 00f8 454B     		ldr	r3, .L38+104
 668 00fa 1A68     		ldr	r2, [r3]	@ float
 669 00fc 454B     		ldr	r3, .L38+108
 670 00fe 1A60     		str	r2, [r3]	@ float
 213:Core/Src/main.c ****         vel_update_flag = FALSE;
 671              		.loc 1 213 9 is_stmt 1 view .LVU138
 213:Core/Src/main.c ****         vel_update_flag = FALSE;
 672              		.loc 1 213 20 is_stmt 0 view .LVU139
 673 0100 454B     		ldr	r3, .L38+112
 674 0102 1A68     		ldr	r2, [r3]	@ float
 675 0104 454B     		ldr	r3, .L38+116
 676 0106 1A60     		str	r2, [r3]	@ float
 214:Core/Src/main.c ****         last_update = HAL_GetTick();
 677              		.loc 1 214 9 is_stmt 1 view .LVU140
 214:Core/Src/main.c ****         last_update = HAL_GetTick();
 678              		.loc 1 214 25 is_stmt 0 view .LVU141
 679 0108 454B     		ldr	r3, .L38+120
 680 010a 0022     		movs	r2, #0
 681 010c 1A70     		strb	r2, [r3]
 215:Core/Src/main.c ****     }
 682              		.loc 1 215 9 is_stmt 1 view .LVU142
 215:Core/Src/main.c ****     }
 683              		.loc 1 215 23 is_stmt 0 view .LVU143
 684 010e FFF7FEFF 		bl	HAL_GetTick
 685              	.LVL44:
 686              	.L33:
 188:Core/Src/main.c ****   {
 687              		.loc 1 188 3 is_stmt 1 view .LVU144
 195:Core/Src/main.c ****     {    
 688              		.loc 1 195 5 view .LVU145
 195:Core/Src/main.c ****     {    
 689              		.loc 1 195 9 is_stmt 0 view .LVU146
 690 0112 434B     		ldr	r3, .L38+120
 691 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 195:Core/Src/main.c ****     {    
 692              		.loc 1 195 8 view .LVU147
 693 0116 002B     		cmp	r3, #0
 694 0118 FBD0     		beq	.L33
 197:Core/Src/main.c ****         
 695              		.loc 1 197 9 is_stmt 1 view .LVU148
 696 011a 3D4C     		ldr	r4, .L38+104
 697 011c 3E4D     		ldr	r5, .L38+112
ARM GAS  /tmp/cc7rScPQ.s 			page 24


 698 011e 2246     		mov	r2, r4
 699 0120 2946     		mov	r1, r5
 700 0122 2848     		ldr	r0, .L38+28
 701 0124 FFF7FEFF 		bl	resolveRxFrame
 702              	.LVL45:
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 703              		.loc 1 200 9 view .LVU149
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 704              		.loc 1 200 39 is_stmt 0 view .LVU150
 705 0128 D5ED008A 		vldr.32	s17, [r5]
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 706              		.loc 1 200 52 view .LVU151
 707 012c D4ED009A 		vldr.32	s19, [r4]
 708 0130 9FED3C8A 		vldr.32	s16, .L38+124
 709 0134 29EE888A 		vmul.f32	s16, s19, s16
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 710              		.loc 1 200 69 view .LVU152
 711 0138 F6EE007A 		vmov.f32	s15, #5.0e-1
 712 013c 28EE278A 		vmul.f32	s16, s16, s15
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 713              		.loc 1 200 39 view .LVU153
 714 0140 78EEC87A 		vsub.f32	s15, s17, s16
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 715              		.loc 1 200 74 view .LVU154
 716 0144 9FED389A 		vldr.32	s18, .L38+128
 717 0148 67EE897A 		vmul.f32	s15, s15, s18
 718 014c 17EE900A 		vmov	r0, s15
 719 0150 FFF7FEFF 		bl	__aeabi_f2d
 720              	.LVL46:
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 721              		.loc 1 200 78 view .LVU155
 722 0154 18A3     		adr	r3, .L38+16
 723 0156 D3E90023 		ldrd	r2, [r3]
 724 015a FFF7FEFF 		bl	__aeabi_ddiv
 725              	.LVL47:
 200:Core/Src/main.c ****         right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHEEL_D
 726              		.loc 1 200 24 view .LVU156
 727 015e 294B     		ldr	r3, .L38+92
 728 0160 C3E90001 		strd	r0, [r3]
 201:Core/Src/main.c **** 
 729              		.loc 1 201 9 is_stmt 1 view .LVU157
 201:Core/Src/main.c **** 
 730              		.loc 1 201 40 is_stmt 0 view .LVU158
 731 0164 38EE888A 		vadd.f32	s16, s17, s16
 201:Core/Src/main.c **** 
 732              		.loc 1 201 74 view .LVU159
 733 0168 68EE097A 		vmul.f32	s15, s16, s18
 734 016c 17EE900A 		vmov	r0, s15
 735 0170 FFF7FEFF 		bl	__aeabi_f2d
 736              	.LVL48:
 201:Core/Src/main.c **** 
 737              		.loc 1 201 78 view .LVU160
 738 0174 10A3     		adr	r3, .L38+16
 739 0176 D3E90023 		ldrd	r2, [r3]
 740 017a FFF7FEFF 		bl	__aeabi_ddiv
 741              	.LVL49:
 201:Core/Src/main.c **** 
ARM GAS  /tmp/cc7rScPQ.s 			page 25


 742              		.loc 1 201 25 view .LVU161
 743 017e 204B     		ldr	r3, .L38+88
 744 0180 C3E90001 		strd	r0, [r3]
 204:Core/Src/main.c ****         {
 745              		.loc 1 204 9 is_stmt 1 view .LVU162
 204:Core/Src/main.c ****         {
 746              		.loc 1 204 24 is_stmt 0 view .LVU163
 747 0184 254B     		ldr	r3, .L38+116
 748 0186 D3ED007A 		vldr.32	s15, [r3]
 204:Core/Src/main.c ****         {
 749              		.loc 1 204 12 view .LVU164
 750 018a F4EE678A 		vcmp.f32	s17, s15
 751 018e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 752 0192 9ED1     		bne	.L34
 204:Core/Src/main.c ****         {
 753              		.loc 1 204 53 discriminator 1 view .LVU165
 754 0194 1F4B     		ldr	r3, .L38+108
 755 0196 D3ED007A 		vldr.32	s15, [r3]
 204:Core/Src/main.c ****         {
 756              		.loc 1 204 38 discriminator 1 view .LVU166
 757 019a F4EE679A 		vcmp.f32	s19, s15
 758 019e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 759 01a2 A9D0     		beq	.L35
 760 01a4 95E7     		b	.L34
 761              	.L39:
 762 01a6 00BF     		.align	3
 763              	.L38:
 764 01a8 00000000 		.word	0
 765 01ac 00002440 		.word	1076101120
 766 01b0 00000000 		.word	0
 767 01b4 00005940 		.word	1079574528
 768 01b8 DCE14F3D 		.word	1028645340
 769 01bc 5723CA3F 		.word	1070211927
 770 01c0 00000000 		.word	huart1
 771 01c4 00000000 		.word	rx_buffer
 772 01c8 00000000 		.word	.LANCHOR4
 773 01cc 3C080040 		.word	1073743932
 774 01d0 00040240 		.word	1073873920
 775 01d4 00000000 		.word	str_right_pid
 776 01d8 00000000 		.word	str_right_motor
 777 01dc 00000000 		.word	.LANCHOR5
 778 01e0 40080040 		.word	1073743936
 779 01e4 00000240 		.word	1073872896
 780 01e8 00000000 		.word	str_left_pid
 781 01ec 00000000 		.word	str_left_motor
 782 01f0 00000000 		.word	htim4
 783 01f4 00000000 		.word	htim3
 784 01f8 00000000 		.word	htim2
 785 01fc 00000000 		.word	htim5
 786 0200 00000000 		.word	.LANCHOR0
 787 0204 00000000 		.word	.LANCHOR1
 788 0208 00000000 		.word	.LANCHOR6
 789 020c 00000000 		.word	.LC0
 790 0210 00000000 		.word	angular_vel
 791 0214 00000000 		.word	last_a_vel
 792 0218 00000000 		.word	linear_vel
 793 021c 00000000 		.word	last_l_vel
ARM GAS  /tmp/cc7rScPQ.s 			page 26


 794 0220 00000000 		.word	.LANCHOR3
 795 0224 85EB513E 		.word	1045556101
 796 0228 00007042 		.word	1114636288
 797              		.cfi_endproc
 798              	.LFE133:
 800              		.comm	last_a_vel,4,4
 801              		.comm	last_l_vel,4,4
 802              		.comm	angular_vel,4,4
 803              		.comm	linear_vel,4,4
 804              		.global	vel_update_flag
 805              		.global	ready_flag
 806              		.comm	str_left_pid,64,8
 807              		.comm	str_left_motor,64,8
 808              		.comm	str_right_pid,64,8
 809              		.comm	str_right_motor,64,8
 810              		.global	left_pid_params
 811              		.global	right_pid_params
 812              		.global	RIGHT_ENCODER_ADDR
 813              		.global	RIGHT_DUTY_ADDR
 814              		.global	left_set_speed
 815              		.global	right_set_speed
 816              		.comm	last_rx,1,1
 817              		.comm	prev_rx,1,1
 818              		.comm	data,8,4
 819              		.comm	tx_buffer,16,4
 820              		.comm	rx_buffer,16,4
 821              		.global	angular_a
 822              		.global	linear_a
 823              		.global	MSG
 824              		.section	.bss.left_set_speed,"aw",%nobits
 825              		.align	3
 826              		.set	.LANCHOR1,. + 0
 829              	left_set_speed:
 830 0000 00000000 		.space	8
 830      00000000 
 831              		.section	.bss.ready_flag,"aw",%nobits
 832              		.set	.LANCHOR2,. + 0
 835              	ready_flag:
 836 0000 00       		.space	1
 837              		.section	.bss.right_set_speed,"aw",%nobits
 838              		.align	3
 839              		.set	.LANCHOR0,. + 0
 842              	right_set_speed:
 843 0000 00000000 		.space	8
 843      00000000 
 844              		.section	.bss.vel_update_flag,"aw",%nobits
 845              		.set	.LANCHOR3,. + 0
 848              	vel_update_flag:
 849 0000 00       		.space	1
 850              		.section	.data.MSG,"aw"
 851              		.align	2
 852              		.set	.LANCHOR6,. + 0
 855              	MSG:
 856 0000 496E6974 		.ascii	"Init\000"
 856      00
 857 0005 00000000 		.space	495
 857      00000000 
ARM GAS  /tmp/cc7rScPQ.s 			page 27


 857      00000000 
 857      00000000 
 857      00000000 
 858              		.section	.data.RIGHT_DUTY_ADDR,"aw"
 859              		.align	2
 862              	RIGHT_DUTY_ADDR:
 863 0000 3C080040 		.word	1073743932
 864              		.section	.data.RIGHT_ENCODER_ADDR,"aw"
 865              		.align	2
 868              	RIGHT_ENCODER_ADDR:
 869 0000 24040040 		.word	1073742884
 870              		.section	.data.angular_a,"aw"
 871              		.align	2
 874              	angular_a:
 875 0000 0A00     		.ascii	"\012\000"
 876 0002 00000000 		.space	98
 876      00000000 
 876      00000000 
 876      00000000 
 876      00000000 
 877              		.section	.data.left_pid_params,"aw"
 878              		.align	3
 879              		.set	.LANCHOR5,. + 0
 882              	left_pid_params:
 883 0000 00000000 		.word	0
 884 0004 00000040 		.word	1073741824
 885 0008 00000040 		.word	1073741824
 886 000c 3333C33F 		.word	1069757235
 887 0010 00000000 		.word	0
 888 0014 00000000 		.word	0
 889              		.section	.data.linear_a,"aw"
 890              		.align	2
 893              	linear_a:
 894 0000 0A00     		.ascii	"\012\000"
 895 0002 00000000 		.space	98
 895      00000000 
 895      00000000 
 895      00000000 
 895      00000000 
 896              		.section	.data.right_pid_params,"aw"
 897              		.align	3
 898              		.set	.LANCHOR4,. + 0
 901              	right_pid_params:
 902 0000 00000000 		.word	0
 903 0004 00000040 		.word	1073741824
 904 0008 00000040 		.word	1073741824
 905 000c 3333C33F 		.word	1069757235
 906 0010 00000000 		.word	0
 907 0014 00000000 		.word	0
 908              		.text
 909              	.Letext0:
 910              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 911              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 912              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 913              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 914              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 915              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
ARM GAS  /tmp/cc7rScPQ.s 			page 28


 916              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 917              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 918              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 919              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 920              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 921              		.file 14 "Core/Inc/tim.h"
 922              		.file 15 "Core/Inc/usart.h"
 923              		.file 16 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 924              		.file 17 "/usr/include/newlib/sys/_types.h"
 925              		.file 18 "/usr/include/newlib/sys/reent.h"
 926              		.file 19 "/usr/include/newlib/sys/lock.h"
 927              		.file 20 "Core/Inc/PID.h"
 928              		.file 21 "/usr/include/newlib/time.h"
 929              		.file 22 "Core/Inc/gpio.h"
 930              		.file 23 "Core/Inc/dma.h"
 931              		.file 24 "Core/Inc/retarget.h"
 932              		.file 25 "/usr/include/newlib/stdio.h"
 933              		.file 26 "Core/Inc/frame_resolve.h"
 934              		.file 27 "<built-in>"
ARM GAS  /tmp/cc7rScPQ.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc7rScPQ.s:18     .text.map_speed:0000000000000000 $t
     /tmp/cc7rScPQ.s:26     .text.map_speed:0000000000000000 map_speed
     /tmp/cc7rScPQ.s:48     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc7rScPQ.s:55     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc7rScPQ.s:112    .text.HAL_TIM_PeriodElapsedCallback:0000000000000040 $d
                            *COM*:0000000000000040 str_right_motor
                            *COM*:0000000000000040 str_left_motor
     /tmp/cc7rScPQ.s:121    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc7rScPQ.s:128    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc7rScPQ.s:236    .text.HAL_UART_RxCpltCallback:0000000000000070 $d
                            *COM*:0000000000000010 rx_buffer
                            *COM*:0000000000000001 prev_rx
                            *COM*:0000000000000001 last_rx
     /tmp/cc7rScPQ.s:246    .text.dma_rx_cplt:0000000000000000 $t
     /tmp/cc7rScPQ.s:253    .text.dma_rx_cplt:0000000000000000 dma_rx_cplt
     /tmp/cc7rScPQ.s:273    .text.dma_rx_half_cplt:0000000000000000 $t
     /tmp/cc7rScPQ.s:280    .text.dma_rx_half_cplt:0000000000000000 dma_rx_half_cplt
     /tmp/cc7rScPQ.s:300    .text.Error_Handler:0000000000000000 $t
     /tmp/cc7rScPQ.s:307    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc7rScPQ.s:339    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc7rScPQ.s:346    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc7rScPQ.s:493    .text.SystemClock_Config:00000000000000a0 $d
     /tmp/cc7rScPQ.s:501    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc7rScPQ.s:505    .text.main:0000000000000000 $t
     /tmp/cc7rScPQ.s:512    .text.main:0000000000000000 main
     /tmp/cc7rScPQ.s:764    .text.main:00000000000001a8 $d
                            *COM*:0000000000000040 str_right_pid
                            *COM*:0000000000000040 str_left_pid
                            *COM*:0000000000000004 angular_vel
                            *COM*:0000000000000004 last_a_vel
                            *COM*:0000000000000004 linear_vel
                            *COM*:0000000000000004 last_l_vel
     /tmp/cc7rScPQ.s:848    .bss.vel_update_flag:0000000000000000 vel_update_flag
     /tmp/cc7rScPQ.s:835    .bss.ready_flag:0000000000000000 ready_flag
     /tmp/cc7rScPQ.s:882    .data.left_pid_params:0000000000000000 left_pid_params
     /tmp/cc7rScPQ.s:901    .data.right_pid_params:0000000000000000 right_pid_params
     /tmp/cc7rScPQ.s:868    .data.RIGHT_ENCODER_ADDR:0000000000000000 RIGHT_ENCODER_ADDR
     /tmp/cc7rScPQ.s:862    .data.RIGHT_DUTY_ADDR:0000000000000000 RIGHT_DUTY_ADDR
     /tmp/cc7rScPQ.s:829    .bss.left_set_speed:0000000000000000 left_set_speed
     /tmp/cc7rScPQ.s:842    .bss.right_set_speed:0000000000000000 right_set_speed
                            *COM*:0000000000000008 data
                            *COM*:0000000000000010 tx_buffer
     /tmp/cc7rScPQ.s:874    .data.angular_a:0000000000000000 angular_a
     /tmp/cc7rScPQ.s:893    .data.linear_a:0000000000000000 linear_a
     /tmp/cc7rScPQ.s:855    .data.MSG:0000000000000000 MSG
     /tmp/cc7rScPQ.s:825    .bss.left_set_speed:0000000000000000 $d
     /tmp/cc7rScPQ.s:836    .bss.ready_flag:0000000000000000 $d
     /tmp/cc7rScPQ.s:838    .bss.right_set_speed:0000000000000000 $d
     /tmp/cc7rScPQ.s:849    .bss.vel_update_flag:0000000000000000 $d
     /tmp/cc7rScPQ.s:851    .data.MSG:0000000000000000 $d
     /tmp/cc7rScPQ.s:859    .data.RIGHT_DUTY_ADDR:0000000000000000 $d
     /tmp/cc7rScPQ.s:865    .data.RIGHT_ENCODER_ADDR:0000000000000000 $d
     /tmp/cc7rScPQ.s:871    .data.angular_a:0000000000000000 $d
     /tmp/cc7rScPQ.s:878    .data.left_pid_params:0000000000000000 $d
     /tmp/cc7rScPQ.s:890    .data.linear_a:0000000000000000 $d
ARM GAS  /tmp/cc7rScPQ.s 			page 30


     /tmp/cc7rScPQ.s:897    .data.right_pid_params:0000000000000000 $d

UNDEFINED SYMBOLS
PID_PreProcess
PID_ComputeOutput
PID_SetDuty
htim5
HAL_UART_Receive_DMA
huart1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
__aeabi_ddiv
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_USART1_UART_Init
MX_TIM4_Init
MX_TIM3_Init
MX_TIM5_Init
MX_TIM2_Init
RetargetInit
PID_MotorInit
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_TIM_Base_Start_IT
sprintf
HAL_UART_Transmit_DMA
HAL_GetTick
resolveRxFrame
htim4
htim3
htim2
