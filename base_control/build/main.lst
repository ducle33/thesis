ARM GAS  /tmp/ccFRXaCd.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_TIM_PeriodElapsedCallback
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_TIM_PeriodElapsedCallback:
  27              	.LVL0:
  28              	.LFB135:
  29              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN tail */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END tail */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "dma.h"
  23:Core/Src/main.c **** #include "tim.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** #include "gpio.h"
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** #include <stdio.h>
ARM GAS  /tmp/ccFRXaCd.s 			page 2


  30:Core/Src/main.c **** #include <string.h>
  31:Core/Src/main.c **** #include "stm32f4xx_it.h"
  32:Core/Src/main.c **** #include "stm32f4xx_hal_def.h"
  33:Core/Src/main.c **** #include "PID.h"
  34:Core/Src/main.c **** #include "config.h"
  35:Core/Src/main.c **** #include "frame_resolve.h"
  36:Core/Src/main.c **** #include "retarget.h"
  37:Core/Src/main.c **** /* USER CODE END Includes */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PTD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PD */
  46:Core/Src/main.c **** #define FALSE   0
  47:Core/Src/main.c **** #define TRUE    1
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** #define DEBUG
  50:Core/Src/main.c **** /* USER CODE END PD */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  53:Core/Src/main.c **** /* USER CODE BEGIN PM */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PM */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** // Arrays
  62:Core/Src/main.c **** uint8_t MSG[500] = "Init";
  63:Core/Src/main.c **** uint8_t linear_a[100] = "\n";
  64:Core/Src/main.c **** uint8_t angular_a[100] = "\n";
  65:Core/Src/main.c **** uint8_t rx_buffer[RX_BUFFER_SIZE];
  66:Core/Src/main.c **** uint8_t tx_buffer[TX_BUFFER_SIZE];
  67:Core/Src/main.c **** uint8_t data[8];
  68:Core/Src/main.c **** uint8_t prev_rx, last_rx;
  69:Core/Src/main.c **** // Cross processes values 
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** #ifdef TEST_HARDWARE
  72:Core/Src/main.c **** volatile uint16_t cnt = 0;
  73:Core/Src/main.c **** volatile uint16_t last_cnt = 0;
  74:Core/Src/main.c **** volatile double enc_cnt = 0.0f;
  75:Core/Src/main.c **** volatile double last_enc_cnt = 0.0f;
  76:Core/Src/main.c **** #endif
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** #ifdef ENABLE_PID
  79:Core/Src/main.c **** /* PID Init Variables */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** volatile uint32_t *RIGHT_DUTY_ADDR = &(TIM4->CCR3);
  82:Core/Src/main.c **** volatile uint32_t *RIGHT_ENCODER_ADDR = &(TIM3->CNT);
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** double right_set_speed = 0.0f; // RPM
  86:Core/Src/main.c **** double left_set_speed = 0.0f; // RPM
ARM GAS  /tmp/ccFRXaCd.s 			page 3


  87:Core/Src/main.c **** double right_pid_params[3] = {RIGHT_MOTOR_KP , RIGHT_MOTOR_KI, RIGHT_MOTOR_KD};
  88:Core/Src/main.c **** double left_pid_params[3] = {LEFT_MOTOR_KP , LEFT_MOTOR_KI, LEFT_MOTOR_KD};
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** // Custom typedef
  92:Core/Src/main.c **** MOTOR_TypeDef str_right_motor;
  93:Core/Src/main.c **** PID_TypeDef str_right_pid;
  94:Core/Src/main.c **** MOTOR_TypeDef str_left_motor;
  95:Core/Src/main.c **** PID_TypeDef str_left_pid;
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** #endif
  98:Core/Src/main.c **** /* Other definitions*/
  99:Core/Src/main.c **** uint8_t ready_flag = FALSE;
 100:Core/Src/main.c **** volatile uint8_t    vel_update_flag = FALSE;
 101:Core/Src/main.c **** float linear_vel;
 102:Core/Src/main.c **** float angular_vel;
 103:Core/Src/main.c **** float last_l_vel, last_a_vel;
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PV */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 108:Core/Src/main.c **** void SystemClock_Config(void);
 109:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 110:Core/Src/main.c **** void dma_rx_cplt(void);
 111:Core/Src/main.c **** void dma_rx_half_cplt(void);
 112:Core/Src/main.c **** /* USER CODE END PFP */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 115:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* USER CODE END 0 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /**
 120:Core/Src/main.c ****   * @brief  The application entry point.
 121:Core/Src/main.c ****   * @retval int
 122:Core/Src/main.c ****   */
 123:Core/Src/main.c **** int main(void)
 124:Core/Src/main.c **** {
 125:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* USER CODE END 1 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 132:Core/Src/main.c ****   HAL_Init();
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE END Init */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Configure the system clock */
 139:Core/Src/main.c ****   SystemClock_Config();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE END SysInit */
ARM GAS  /tmp/ccFRXaCd.s 			page 4


 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* Initialize all configured peripherals */
 146:Core/Src/main.c ****   MX_GPIO_Init();
 147:Core/Src/main.c ****   MX_DMA_Init();
 148:Core/Src/main.c ****   MX_USART1_UART_Init();
 149:Core/Src/main.c ****   MX_TIM4_Init();
 150:Core/Src/main.c ****   MX_TIM3_Init();
 151:Core/Src/main.c ****   MX_TIM5_Init();
 152:Core/Src/main.c ****   MX_TIM2_Init();
 153:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 154:Core/Src/main.c ****   RetargetInit(&huart1);
 155:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   #ifdef ENABLE_PID
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   PID_MotorInit(&str_right_motor, &str_right_pid, GPIOB, GPIO_PIN_6 , GPIO_PIN_7, 100.0f, 10.0f, &(
 160:Core/Src/main.c ****   PID_MotorInit(&str_left_motor, &str_left_pid, GPIOA, GPIO_PIN_6 , GPIO_PIN_7, 100.0f, 10.0f, &(TI
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   // Start Timer4 for PWM function on channel 3 and channel 4
 163:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 164:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   // Reset PWM Duty Cycle to zero on TIM 4 output channel 3 and channel 4
 167:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 168:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 169:Core/Src/main.c ****   
 170:Core/Src/main.c ****   // Start Timer3 for RIGHT Encoder Interfacing.
 171:Core/Src/main.c ****   HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 172:Core/Src/main.c ****   // Start Timer2 for LEFT Encoder Interfacing.
 173:Core/Src/main.c ****   HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   // Start Timer5 for sampling loop interrupt
 176:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim5);
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   #endif
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE END 2 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* Infinite loop */
 183:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 184:Core/Src/main.c ****   while (1)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     /* USER CODE END WHILE */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****     if (vel_update_flag)
 192:Core/Src/main.c ****     {
 193:Core/Src/main.c ****         resolveRxFrame(rx_buffer, &linear_vel, &angular_vel);
 194:Core/Src/main.c ****         #ifdef DEBUG
 195:Core/Src/main.c ****         if (linear_vel != last_l_vel || angular_vel != last_a_vel)
 196:Core/Src/main.c ****         {
 197:Core/Src/main.c ****             // sprintf((char *)MSG, "Vel: %.3f | %.3f \n", linear_vel, angular_vel);
 198:Core/Src/main.c ****             // HAL_UART_Transmit_DMA(&huart1, MSG, sizeof(MSG));
 199:Core/Src/main.c ****             printf("Vel : %.5f  | %.5f \n", linear_vel, angular_vel);
 200:Core/Src/main.c ****         }
ARM GAS  /tmp/ccFRXaCd.s 			page 5


 201:Core/Src/main.c ****         #endif
 202:Core/Src/main.c ****         last_a_vel = angular_vel;
 203:Core/Src/main.c ****         last_l_vel = linear_vel;
 204:Core/Src/main.c ****         vel_update_flag = FALSE;
 205:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 206:Core/Src/main.c ****     }
 207:Core/Src/main.c ****     HAL_Delay(100);
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE END 3 */
 210:Core/Src/main.c **** }
 211:Core/Src/main.c **** 
 212:Core/Src/main.c **** /**
 213:Core/Src/main.c ****   * @brief System Clock Configuration
 214:Core/Src/main.c ****   * @retval None
 215:Core/Src/main.c ****   */
 216:Core/Src/main.c **** void SystemClock_Config(void)
 217:Core/Src/main.c **** {
 218:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 219:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 224:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 225:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 226:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 227:Core/Src/main.c ****   */
 228:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 229:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 235:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 236:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 237:Core/Src/main.c ****   {
 238:Core/Src/main.c ****     Error_Handler();
 239:Core/Src/main.c ****   }
 240:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 243:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 244:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 245:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 247:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 250:Core/Src/main.c ****   {
 251:Core/Src/main.c ****     Error_Handler();
 252:Core/Src/main.c ****   }
 253:Core/Src/main.c **** }
 254:Core/Src/main.c **** 
 255:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** 
ARM GAS  /tmp/ccFRXaCd.s 			page 6


 258:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 259:Core/Src/main.c **** {
  30              		.loc 1 259 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 260:Core/Src/main.c ****   if (htim == &htim5)
  35              		.loc 1 260 3 view .LVU1
  36              		.loc 1 260 6 is_stmt 0 view .LVU2
  37 0000 024B     		ldr	r3, .L4
  38 0002 8342     		cmp	r3, r0
  39 0004 00D0     		beq	.L3
  40              	.L1:
 261:Core/Src/main.c ****   {
 262:Core/Src/main.c ****     #ifdef TEST_HARDWARE
 263:Core/Src/main.c ****     // Do sampling and calculate stuff
 264:Core/Src/main.c ****     cnt++;
 265:Core/Src/main.c ****     if (cnt == 100)
 266:Core/Src/main.c ****     {
 267:Core/Src/main.c ****         
 268:Core/Src/main.c ****         enc_cnt = TIM3->CNT;
 269:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 270:Core/Src/main.c ****         if (enc_cnt!=last_enc_cnt)
 271:Core/Src/main.c ****         {
 272:Core/Src/main.c ****           sprintf((char *)period, "-> %d pulses/sec\n", (enc_cnt-last_enc_cnt));
 273:Core/Src/main.c ****           HAL_UART_Transmit_DMA(&huart1, period, sizeof(period));
 274:Core/Src/main.c ****         }
 275:Core/Src/main.c ****         cnt = 0;
 276:Core/Src/main.c ****         last_enc_cnt = enc_cnt;
 277:Core/Src/main.c ****         
 278:Core/Src/main.c ****     }
 279:Core/Src/main.c ****     #endif
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****     #ifdef ENABLE_RIGHT_MOTOR
 282:Core/Src/main.c ****     /* =================
 283:Core/Src/main.c ****     * MAIN PID CLOSE-LOOP SAMPLING AND COMPUTE
 284:Core/Src/main.c ****     *  =================== */
 285:Core/Src/main.c ****     // RIGHT MOTOR PI CONTROL 
 286:Core/Src/main.c ****     PID_PreProcess(&str_right_motor, right_set_speed);
 287:Core/Src/main.c ****     PID_ComputeOutput(&str_right_motor);
 288:Core/Src/main.c ****     PID_SetDuty(&str_right_motor );
 289:Core/Src/main.c ****     PID_PreProcess(&str_left_motor, left_set_speed);
 290:Core/Src/main.c ****     PID_ComputeOutput(&str_left_motor);
 291:Core/Src/main.c ****     PID_SetDuty(&str_left_motor );
 292:Core/Src/main.c ****     #else 
 293:Core/Src/main.c ****     __NOP();
 294:Core/Src/main.c ****     #endif
 295:Core/Src/main.c ****   }
 296:Core/Src/main.c **** }
  41              		.loc 1 296 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L3:
 293:Core/Src/main.c ****     #endif
  44              		.loc 1 293 5 is_stmt 1 view .LVU4
  45              		.syntax unified
  46              	@ 293 "Core/Src/main.c" 1
ARM GAS  /tmp/ccFRXaCd.s 			page 7


  47 0008 00BF     		nop
  48              	@ 0 "" 2
  49              		.loc 1 296 1 is_stmt 0 view .LVU5
  50              		.thumb
  51              		.syntax unified
  52 000a FCE7     		b	.L1
  53              	.L5:
  54              		.align	2
  55              	.L4:
  56 000c 00000000 		.word	htim5
  57              		.cfi_endproc
  58              	.LFE135:
  60              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
  61              		.align	1
  62              		.global	HAL_UART_RxCpltCallback
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	HAL_UART_RxCpltCallback:
  69              	.LVL1:
  70              	.LFB136:
 297:Core/Src/main.c **** 
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 300:Core/Src/main.c **** {
  71              		.loc 1 300 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		.loc 1 300 1 is_stmt 0 view .LVU7
  76 0000 08B5     		push	{r3, lr}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 3, -8
  80              		.cfi_offset 14, -4
 301:Core/Src/main.c ****     
 302:Core/Src/main.c ****     if (ready_flag == TRUE)
  81              		.loc 1 302 5 is_stmt 1 view .LVU8
  82              		.loc 1 302 20 is_stmt 0 view .LVU9
  83 0002 1D4B     		ldr	r3, .L13
  84 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  85              		.loc 1 302 8 view .LVU10
  86 0006 012B     		cmp	r3, #1
  87 0008 14D0     		beq	.L11
 303:Core/Src/main.c ****     {
 304:Core/Src/main.c ****         // Do things
 305:Core/Src/main.c ****         // sprintf( (char *) MSG, (char *) rx_buffer, RX_BUFFER_SIZE);
 306:Core/Src/main.c ****         // HAL_UART_Transmit_DMA(&huart1, MSG, RX_BUFFER_SIZE);
 307:Core/Src/main.c ****         vel_update_flag = TRUE;
 308:Core/Src/main.c ****         ready_flag = FALSE;
 309:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 310:Core/Src/main.c ****     }
 311:Core/Src/main.c ****     else
 312:Core/Src/main.c ****     {
 313:Core/Src/main.c ****         if (rx_buffer[0] == 0x16 && prev_rx == 0x16 && last_rx == 0x16) // SYN
  88              		.loc 1 313 9 is_stmt 1 view .LVU11
ARM GAS  /tmp/ccFRXaCd.s 			page 8


  89              		.loc 1 313 22 is_stmt 0 view .LVU12
  90 000a 1C4B     		ldr	r3, .L13+4
  91 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  92              		.loc 1 313 12 view .LVU13
  93 000e 162B     		cmp	r3, #22
  94 0010 03D1     		bne	.L9
  95              		.loc 1 313 45 discriminator 1 view .LVU14
  96 0012 1B4B     		ldr	r3, .L13+8
  97 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  98              		.loc 1 313 34 discriminator 1 view .LVU15
  99 0016 162B     		cmp	r3, #22
 100 0018 17D0     		beq	.L12
 101              	.L9:
 314:Core/Src/main.c ****         {
 315:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 316:Core/Src/main.c ****             ready_flag = TRUE;
 317:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 318:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE);   
 319:Core/Src/main.c ****         }
 320:Core/Src/main.c ****         else
 321:Core/Src/main.c ****         {
 322:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 102              		.loc 1 322 13 is_stmt 1 view .LVU16
 103 001a 0122     		movs	r2, #1
 104 001c 1749     		ldr	r1, .L13+4
 105 001e 1948     		ldr	r0, .L13+12
 106              	.LVL2:
 107              		.loc 1 322 13 is_stmt 0 view .LVU17
 108 0020 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 109              	.LVL3:
 110              	.L8:
 323:Core/Src/main.c ****         }
 324:Core/Src/main.c ****     } 
 325:Core/Src/main.c ****     last_rx = prev_rx;
 111              		.loc 1 325 5 is_stmt 1 view .LVU18
 112              		.loc 1 325 13 is_stmt 0 view .LVU19
 113 0024 164B     		ldr	r3, .L13+8
 114 0026 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 115 0028 174A     		ldr	r2, .L13+16
 116 002a 1170     		strb	r1, [r2]
 326:Core/Src/main.c ****     prev_rx = rx_buffer[0];
 117              		.loc 1 326 5 is_stmt 1 view .LVU20
 118              		.loc 1 326 24 is_stmt 0 view .LVU21
 119 002c 134A     		ldr	r2, .L13+4
 120 002e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 121              		.loc 1 326 13 view .LVU22
 122 0030 1A70     		strb	r2, [r3]
 327:Core/Src/main.c **** }
 123              		.loc 1 327 1 view .LVU23
 124 0032 08BD     		pop	{r3, pc}
 125              	.LVL4:
 126              	.L11:
 307:Core/Src/main.c ****         ready_flag = FALSE;
 127              		.loc 1 307 9 is_stmt 1 view .LVU24
 307:Core/Src/main.c ****         ready_flag = FALSE;
 128              		.loc 1 307 25 is_stmt 0 view .LVU25
 129 0034 0122     		movs	r2, #1
ARM GAS  /tmp/ccFRXaCd.s 			page 9


 130 0036 154B     		ldr	r3, .L13+20
 131 0038 1A70     		strb	r2, [r3]
 308:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 132              		.loc 1 308 9 is_stmt 1 view .LVU26
 308:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 133              		.loc 1 308 20 is_stmt 0 view .LVU27
 134 003a 0F4B     		ldr	r3, .L13
 135 003c 0021     		movs	r1, #0
 136 003e 1970     		strb	r1, [r3]
 309:Core/Src/main.c ****     }
 137              		.loc 1 309 9 is_stmt 1 view .LVU28
 138 0040 0E49     		ldr	r1, .L13+4
 139 0042 1048     		ldr	r0, .L13+12
 140              	.LVL5:
 309:Core/Src/main.c ****     }
 141              		.loc 1 309 9 is_stmt 0 view .LVU29
 142 0044 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 143              	.LVL6:
 144 0048 ECE7     		b	.L8
 145              	.LVL7:
 146              	.L12:
 313:Core/Src/main.c ****         {
 147              		.loc 1 313 64 discriminator 2 view .LVU30
 148 004a 0F4B     		ldr	r3, .L13+16
 149 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313:Core/Src/main.c ****         {
 150              		.loc 1 313 53 discriminator 2 view .LVU31
 151 004e 162B     		cmp	r3, #22
 152 0050 E3D1     		bne	.L9
 315:Core/Src/main.c ****             ready_flag = TRUE;
 153              		.loc 1 315 13 is_stmt 1 view .LVU32
 154 0052 8021     		movs	r1, #128
 155 0054 0E48     		ldr	r0, .L13+24
 156              	.LVL8:
 315:Core/Src/main.c ****             ready_flag = TRUE;
 157              		.loc 1 315 13 is_stmt 0 view .LVU33
 158 0056 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 159              	.LVL9:
 316:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 160              		.loc 1 316 13 is_stmt 1 view .LVU34
 316:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 161              		.loc 1 316 24 is_stmt 0 view .LVU35
 162 005a 074B     		ldr	r3, .L13
 163 005c 0122     		movs	r2, #1
 164 005e 1A70     		strb	r2, [r3]
 317:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE);   
 165              		.loc 1 317 13 is_stmt 1 view .LVU36
 166 0060 0649     		ldr	r1, .L13+4
 167 0062 0023     		movs	r3, #0
 168 0064 0B60     		str	r3, [r1]	@ unaligned
 169 0066 4B60     		str	r3, [r1, #4]	@ unaligned
 170 0068 8B60     		str	r3, [r1, #8]	@ unaligned
 171 006a CB60     		str	r3, [r1, #12]	@ unaligned
 318:Core/Src/main.c ****         }
 172              		.loc 1 318 13 view .LVU37
 173 006c 1022     		movs	r2, #16
 174 006e 0548     		ldr	r0, .L13+12
ARM GAS  /tmp/ccFRXaCd.s 			page 10


 175 0070 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 176              	.LVL10:
 177 0074 D6E7     		b	.L8
 178              	.L14:
 179 0076 00BF     		.align	2
 180              	.L13:
 181 0078 00000000 		.word	.LANCHOR0
 182 007c 00000000 		.word	rx_buffer
 183 0080 00000000 		.word	prev_rx
 184 0084 00000000 		.word	huart1
 185 0088 00000000 		.word	last_rx
 186 008c 00000000 		.word	.LANCHOR1
 187 0090 00000240 		.word	1073872896
 188              		.cfi_endproc
 189              	.LFE136:
 191              		.section	.text.dma_rx_cplt,"ax",%progbits
 192              		.align	1
 193              		.global	dma_rx_cplt
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	dma_rx_cplt:
 200              	.LFB137:
 328:Core/Src/main.c **** 
 329:Core/Src/main.c **** void dma_rx_cplt()
 330:Core/Src/main.c **** {
 201              		.loc 1 330 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 331:Core/Src/main.c ****     __NOP();
 206              		.loc 1 331 5 view .LVU39
 207              		.syntax unified
 208              	@ 331 "Core/Src/main.c" 1
 209 0000 00BF     		nop
 210              	@ 0 "" 2
 332:Core/Src/main.c **** }
 211              		.loc 1 332 1 is_stmt 0 view .LVU40
 212              		.thumb
 213              		.syntax unified
 214 0002 7047     		bx	lr
 215              		.cfi_endproc
 216              	.LFE137:
 218              		.section	.text.dma_rx_half_cplt,"ax",%progbits
 219              		.align	1
 220              		.global	dma_rx_half_cplt
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv4-sp-d16
 226              	dma_rx_half_cplt:
 227              	.LFB138:
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** void dma_rx_half_cplt()
 335:Core/Src/main.c **** {
ARM GAS  /tmp/ccFRXaCd.s 			page 11


 228              		.loc 1 335 1 is_stmt 1 view -0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              		@ link register save eliminated.
 336:Core/Src/main.c ****     __NOP();
 233              		.loc 1 336 5 view .LVU42
 234              		.syntax unified
 235              	@ 336 "Core/Src/main.c" 1
 236 0000 00BF     		nop
 237              	@ 0 "" 2
 337:Core/Src/main.c **** }
 238              		.loc 1 337 1 is_stmt 0 view .LVU43
 239              		.thumb
 240              		.syntax unified
 241 0002 7047     		bx	lr
 242              		.cfi_endproc
 243              	.LFE138:
 245              		.section	.text.Error_Handler,"ax",%progbits
 246              		.align	1
 247              		.global	Error_Handler
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	Error_Handler:
 254              	.LFB139:
 338:Core/Src/main.c **** 
 339:Core/Src/main.c **** /* USER CODE END 4 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c **** /**
 342:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 343:Core/Src/main.c ****   * @retval None
 344:Core/Src/main.c ****   */
 345:Core/Src/main.c **** void Error_Handler(void)
 346:Core/Src/main.c **** {
 255              		.loc 1 346 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ Volatile: function does not return.
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 347:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 348:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 349:Core/Src/main.c ****   __disable_irq();
 261              		.loc 1 349 3 view .LVU45
 262              	.LBB4:
 263              	.LBI4:
 264              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
ARM GAS  /tmp/ccFRXaCd.s 			page 12


   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  /tmp/ccFRXaCd.s 			page 13


  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccFRXaCd.s 			page 14


 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 265              		.loc 2 140 27 view .LVU46
 266              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 267              		.loc 2 142 3 view .LVU47
 268              		.syntax unified
 269              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 270 0000 72B6     		cpsid i
 271              	@ 0 "" 2
 272              		.thumb
 273              		.syntax unified
 274              	.L18:
 275              	.LBE5:
 276              	.LBE4:
 350:Core/Src/main.c ****   while (1)
 277              		.loc 1 350 3 discriminator 1 view .LVU48
 351:Core/Src/main.c ****   {
 352:Core/Src/main.c ****   }
 278              		.loc 1 352 3 discriminator 1 view .LVU49
 350:Core/Src/main.c ****   while (1)
 279              		.loc 1 350 9 discriminator 1 view .LVU50
 280 0002 FEE7     		b	.L18
 281              		.cfi_endproc
 282              	.LFE139:
 284              		.section	.text.SystemClock_Config,"ax",%progbits
 285              		.align	1
 286              		.global	SystemClock_Config
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	SystemClock_Config:
 293              	.LFB134:
 217:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 294              		.loc 1 217 1 view -0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 80
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccFRXaCd.s 			page 15


 299              	.LCFI1:
 300              		.cfi_def_cfa_offset 4
 301              		.cfi_offset 14, -4
 302 0002 95B0     		sub	sp, sp, #84
 303              	.LCFI2:
 304              		.cfi_def_cfa_offset 88
 218:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 305              		.loc 1 218 3 view .LVU52
 218:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 306              		.loc 1 218 22 is_stmt 0 view .LVU53
 307 0004 3022     		movs	r2, #48
 308 0006 0021     		movs	r1, #0
 309 0008 08A8     		add	r0, sp, #32
 310 000a FFF7FEFF 		bl	memset
 311              	.LVL11:
 219:Core/Src/main.c **** 
 312              		.loc 1 219 3 is_stmt 1 view .LVU54
 219:Core/Src/main.c **** 
 313              		.loc 1 219 22 is_stmt 0 view .LVU55
 314 000e 0023     		movs	r3, #0
 315 0010 0393     		str	r3, [sp, #12]
 316 0012 0493     		str	r3, [sp, #16]
 317 0014 0593     		str	r3, [sp, #20]
 318 0016 0693     		str	r3, [sp, #24]
 319 0018 0793     		str	r3, [sp, #28]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 320              		.loc 1 223 3 is_stmt 1 view .LVU56
 321              	.LBB6:
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 322              		.loc 1 223 3 view .LVU57
 323 001a 0193     		str	r3, [sp, #4]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 324              		.loc 1 223 3 view .LVU58
 325 001c 204A     		ldr	r2, .L25
 326 001e 116C     		ldr	r1, [r2, #64]
 327 0020 41F08051 		orr	r1, r1, #268435456
 328 0024 1164     		str	r1, [r2, #64]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 329              		.loc 1 223 3 view .LVU59
 330 0026 126C     		ldr	r2, [r2, #64]
 331 0028 02F08052 		and	r2, r2, #268435456
 332 002c 0192     		str	r2, [sp, #4]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 333              		.loc 1 223 3 view .LVU60
 334 002e 019A     		ldr	r2, [sp, #4]
 335              	.LBE6:
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 336              		.loc 1 223 3 view .LVU61
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 337              		.loc 1 224 3 view .LVU62
 338              	.LBB7:
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 339              		.loc 1 224 3 view .LVU63
 340 0030 0293     		str	r3, [sp, #8]
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 341              		.loc 1 224 3 view .LVU64
 342 0032 1C4B     		ldr	r3, .L25+4
ARM GAS  /tmp/ccFRXaCd.s 			page 16


 343 0034 1A68     		ldr	r2, [r3]
 344 0036 42F48042 		orr	r2, r2, #16384
 345 003a 1A60     		str	r2, [r3]
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 346              		.loc 1 224 3 view .LVU65
 347 003c 1B68     		ldr	r3, [r3]
 348 003e 03F48043 		and	r3, r3, #16384
 349 0042 0293     		str	r3, [sp, #8]
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 350              		.loc 1 224 3 view .LVU66
 351 0044 029B     		ldr	r3, [sp, #8]
 352              	.LBE7:
 224:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 353              		.loc 1 224 3 view .LVU67
 228:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 354              		.loc 1 228 3 view .LVU68
 228:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 355              		.loc 1 228 36 is_stmt 0 view .LVU69
 356 0046 0123     		movs	r3, #1
 357 0048 0893     		str	r3, [sp, #32]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 358              		.loc 1 229 3 is_stmt 1 view .LVU70
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 359              		.loc 1 229 30 is_stmt 0 view .LVU71
 360 004a 4FF48033 		mov	r3, #65536
 361 004e 0993     		str	r3, [sp, #36]
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 362              		.loc 1 230 3 is_stmt 1 view .LVU72
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 363              		.loc 1 230 34 is_stmt 0 view .LVU73
 364 0050 0222     		movs	r2, #2
 365 0052 0E92     		str	r2, [sp, #56]
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 366              		.loc 1 231 3 is_stmt 1 view .LVU74
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 367              		.loc 1 231 35 is_stmt 0 view .LVU75
 368 0054 4FF48003 		mov	r3, #4194304
 369 0058 0F93     		str	r3, [sp, #60]
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 370              		.loc 1 232 3 is_stmt 1 view .LVU76
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 371              		.loc 1 232 30 is_stmt 0 view .LVU77
 372 005a 0423     		movs	r3, #4
 373 005c 1093     		str	r3, [sp, #64]
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 374              		.loc 1 233 3 is_stmt 1 view .LVU78
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 375              		.loc 1 233 30 is_stmt 0 view .LVU79
 376 005e A821     		movs	r1, #168
 377 0060 1191     		str	r1, [sp, #68]
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 378              		.loc 1 234 3 is_stmt 1 view .LVU80
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 379              		.loc 1 234 30 is_stmt 0 view .LVU81
 380 0062 1292     		str	r2, [sp, #72]
 235:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 381              		.loc 1 235 3 is_stmt 1 view .LVU82
ARM GAS  /tmp/ccFRXaCd.s 			page 17


 235:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 382              		.loc 1 235 30 is_stmt 0 view .LVU83
 383 0064 1393     		str	r3, [sp, #76]
 236:Core/Src/main.c ****   {
 384              		.loc 1 236 3 is_stmt 1 view .LVU84
 236:Core/Src/main.c ****   {
 385              		.loc 1 236 7 is_stmt 0 view .LVU85
 386 0066 08A8     		add	r0, sp, #32
 387 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 388              	.LVL12:
 236:Core/Src/main.c ****   {
 389              		.loc 1 236 6 view .LVU86
 390 006c 98B9     		cbnz	r0, .L23
 242:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 391              		.loc 1 242 3 is_stmt 1 view .LVU87
 242:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 392              		.loc 1 242 31 is_stmt 0 view .LVU88
 393 006e 0F23     		movs	r3, #15
 394 0070 0393     		str	r3, [sp, #12]
 244:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 395              		.loc 1 244 3 is_stmt 1 view .LVU89
 244:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 396              		.loc 1 244 34 is_stmt 0 view .LVU90
 397 0072 0223     		movs	r3, #2
 398 0074 0493     		str	r3, [sp, #16]
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 399              		.loc 1 245 3 is_stmt 1 view .LVU91
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 400              		.loc 1 245 35 is_stmt 0 view .LVU92
 401 0076 0023     		movs	r3, #0
 402 0078 0593     		str	r3, [sp, #20]
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 403              		.loc 1 246 3 is_stmt 1 view .LVU93
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 404              		.loc 1 246 36 is_stmt 0 view .LVU94
 405 007a 4FF4A053 		mov	r3, #5120
 406 007e 0693     		str	r3, [sp, #24]
 247:Core/Src/main.c **** 
 407              		.loc 1 247 3 is_stmt 1 view .LVU95
 247:Core/Src/main.c **** 
 408              		.loc 1 247 36 is_stmt 0 view .LVU96
 409 0080 4FF48053 		mov	r3, #4096
 410 0084 0793     		str	r3, [sp, #28]
 249:Core/Src/main.c ****   {
 411              		.loc 1 249 3 is_stmt 1 view .LVU97
 249:Core/Src/main.c ****   {
 412              		.loc 1 249 7 is_stmt 0 view .LVU98
 413 0086 0521     		movs	r1, #5
 414 0088 03A8     		add	r0, sp, #12
 415 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 416              	.LVL13:
 249:Core/Src/main.c ****   {
 417              		.loc 1 249 6 view .LVU99
 418 008e 20B9     		cbnz	r0, .L24
 253:Core/Src/main.c **** 
 419              		.loc 1 253 1 view .LVU100
 420 0090 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccFRXaCd.s 			page 18


 421              	.LCFI3:
 422              		.cfi_remember_state
 423              		.cfi_def_cfa_offset 4
 424              		@ sp needed
 425 0092 5DF804FB 		ldr	pc, [sp], #4
 426              	.L23:
 427              	.LCFI4:
 428              		.cfi_restore_state
 238:Core/Src/main.c ****   }
 429              		.loc 1 238 5 is_stmt 1 view .LVU101
 430 0096 FFF7FEFF 		bl	Error_Handler
 431              	.LVL14:
 432              	.L24:
 251:Core/Src/main.c ****   }
 433              		.loc 1 251 5 view .LVU102
 434 009a FFF7FEFF 		bl	Error_Handler
 435              	.LVL15:
 436              	.L26:
 437 009e 00BF     		.align	2
 438              	.L25:
 439 00a0 00380240 		.word	1073887232
 440 00a4 00700040 		.word	1073770496
 441              		.cfi_endproc
 442              	.LFE134:
 444              		.global	__aeabi_f2d
 445              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 446              		.align	2
 447              	.LC0:
 448 0000 56656C20 		.ascii	"Vel : %.5f  | %.5f \012\000"
 448      3A20252E 
 448      35662020 
 448      7C20252E 
 448      3566200A 
 449              		.section	.text.main,"ax",%progbits
 450              		.align	1
 451              		.global	main
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu fpv4-sp-d16
 457              	main:
 458              	.LFB133:
 124:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 459              		.loc 1 124 1 view -0
 460              		.cfi_startproc
 461              		@ Volatile: function does not return.
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464 0000 00B5     		push	{lr}
 465              	.LCFI5:
 466              		.cfi_def_cfa_offset 4
 467              		.cfi_offset 14, -4
 468 0002 83B0     		sub	sp, sp, #12
 469              	.LCFI6:
 470              		.cfi_def_cfa_offset 16
 132:Core/Src/main.c **** 
 471              		.loc 1 132 3 view .LVU104
ARM GAS  /tmp/ccFRXaCd.s 			page 19


 472 0004 FFF7FEFF 		bl	HAL_Init
 473              	.LVL16:
 139:Core/Src/main.c **** 
 474              		.loc 1 139 3 view .LVU105
 475 0008 FFF7FEFF 		bl	SystemClock_Config
 476              	.LVL17:
 146:Core/Src/main.c ****   MX_DMA_Init();
 477              		.loc 1 146 3 view .LVU106
 478 000c FFF7FEFF 		bl	MX_GPIO_Init
 479              	.LVL18:
 147:Core/Src/main.c ****   MX_USART1_UART_Init();
 480              		.loc 1 147 3 view .LVU107
 481 0010 FFF7FEFF 		bl	MX_DMA_Init
 482              	.LVL19:
 148:Core/Src/main.c ****   MX_TIM4_Init();
 483              		.loc 1 148 3 view .LVU108
 484 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
 485              	.LVL20:
 149:Core/Src/main.c ****   MX_TIM3_Init();
 486              		.loc 1 149 3 view .LVU109
 487 0018 FFF7FEFF 		bl	MX_TIM4_Init
 488              	.LVL21:
 150:Core/Src/main.c ****   MX_TIM5_Init();
 489              		.loc 1 150 3 view .LVU110
 490 001c FFF7FEFF 		bl	MX_TIM3_Init
 491              	.LVL22:
 151:Core/Src/main.c ****   MX_TIM2_Init();
 492              		.loc 1 151 3 view .LVU111
 493 0020 FFF7FEFF 		bl	MX_TIM5_Init
 494              	.LVL23:
 152:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 495              		.loc 1 152 3 view .LVU112
 496 0024 FFF7FEFF 		bl	MX_TIM2_Init
 497              	.LVL24:
 154:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 498              		.loc 1 154 3 view .LVU113
 499 0028 264C     		ldr	r4, .L33
 500 002a 2046     		mov	r0, r4
 501 002c FFF7FEFF 		bl	RetargetInit
 502              	.LVL25:
 155:Core/Src/main.c **** 
 503              		.loc 1 155 3 view .LVU114
 504 0030 0122     		movs	r2, #1
 505 0032 2549     		ldr	r1, .L33+4
 506 0034 2046     		mov	r0, r4
 507 0036 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 508              	.LVL26:
 509 003a 22E0     		b	.L31
 510              	.L29:
 199:Core/Src/main.c ****         }
 511              		.loc 1 199 13 view .LVU115
 512 003c 17EE900A 		vmov	r0, s15
 513 0040 FFF7FEFF 		bl	__aeabi_f2d
 514              	.LVL27:
 515 0044 0446     		mov	r4, r0
 516 0046 0D46     		mov	r5, r1
 517 0048 204B     		ldr	r3, .L33+8
ARM GAS  /tmp/ccFRXaCd.s 			page 20


 518 004a 1868     		ldr	r0, [r3]	@ float
 519 004c FFF7FEFF 		bl	__aeabi_f2d
 520              	.LVL28:
 521 0050 CDE90001 		strd	r0, [sp]
 522 0054 2246     		mov	r2, r4
 523 0056 2B46     		mov	r3, r5
 524 0058 1D48     		ldr	r0, .L33+12
 525 005a FFF7FEFF 		bl	printf
 526              	.LVL29:
 527              	.L30:
 202:Core/Src/main.c ****         last_l_vel = linear_vel;
 528              		.loc 1 202 9 view .LVU116
 202:Core/Src/main.c ****         last_l_vel = linear_vel;
 529              		.loc 1 202 20 is_stmt 0 view .LVU117
 530 005e 1B4B     		ldr	r3, .L33+8
 531 0060 1A68     		ldr	r2, [r3]	@ float
 532 0062 1C4B     		ldr	r3, .L33+16
 533 0064 1A60     		str	r2, [r3]	@ float
 203:Core/Src/main.c ****         vel_update_flag = FALSE;
 534              		.loc 1 203 9 is_stmt 1 view .LVU118
 203:Core/Src/main.c ****         vel_update_flag = FALSE;
 535              		.loc 1 203 20 is_stmt 0 view .LVU119
 536 0066 1C4B     		ldr	r3, .L33+20
 537 0068 1A68     		ldr	r2, [r3]	@ float
 538 006a 1C4B     		ldr	r3, .L33+24
 539 006c 1A60     		str	r2, [r3]	@ float
 204:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 540              		.loc 1 204 9 is_stmt 1 view .LVU120
 204:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 541              		.loc 1 204 25 is_stmt 0 view .LVU121
 542 006e 1C4B     		ldr	r3, .L33+28
 543 0070 0022     		movs	r2, #0
 544 0072 1A70     		strb	r2, [r3]
 205:Core/Src/main.c ****     }
 545              		.loc 1 205 9 is_stmt 1 view .LVU122
 546 0074 4021     		movs	r1, #64
 547 0076 1B48     		ldr	r0, .L33+32
 548 0078 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 549              	.LVL30:
 550              	.L28:
 207:Core/Src/main.c ****   }
 551              		.loc 1 207 5 view .LVU123
 552 007c 6420     		movs	r0, #100
 553 007e FFF7FEFF 		bl	HAL_Delay
 554              	.LVL31:
 184:Core/Src/main.c ****   {
 555              		.loc 1 184 9 view .LVU124
 556              	.L31:
 184:Core/Src/main.c ****   {
 557              		.loc 1 184 3 view .LVU125
 191:Core/Src/main.c ****     {
 558              		.loc 1 191 5 view .LVU126
 191:Core/Src/main.c ****     {
 559              		.loc 1 191 9 is_stmt 0 view .LVU127
 560 0082 174B     		ldr	r3, .L33+28
 561 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 191:Core/Src/main.c ****     {
ARM GAS  /tmp/ccFRXaCd.s 			page 21


 562              		.loc 1 191 8 view .LVU128
 563 0086 002B     		cmp	r3, #0
 564 0088 F8D0     		beq	.L28
 193:Core/Src/main.c ****         #ifdef DEBUG
 565              		.loc 1 193 9 is_stmt 1 view .LVU129
 566 008a 134C     		ldr	r4, .L33+20
 567 008c 0F4A     		ldr	r2, .L33+8
 568 008e 2146     		mov	r1, r4
 569 0090 0D48     		ldr	r0, .L33+4
 570 0092 FFF7FEFF 		bl	resolveRxFrame
 571              	.LVL32:
 195:Core/Src/main.c ****         {
 572              		.loc 1 195 9 view .LVU130
 195:Core/Src/main.c ****         {
 573              		.loc 1 195 24 is_stmt 0 view .LVU131
 574 0096 D4ED007A 		vldr.32	s15, [r4]
 575 009a 104B     		ldr	r3, .L33+24
 576 009c 93ED007A 		vldr.32	s14, [r3]
 195:Core/Src/main.c ****         {
 577              		.loc 1 195 12 view .LVU132
 578 00a0 F4EE477A 		vcmp.f32	s15, s14
 579 00a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 580 00a8 C8D1     		bne	.L29
 195:Core/Src/main.c ****         {
 581              		.loc 1 195 53 discriminator 1 view .LVU133
 582 00aa 084B     		ldr	r3, .L33+8
 583 00ac D3ED006A 		vldr.32	s13, [r3]
 584 00b0 084B     		ldr	r3, .L33+16
 585 00b2 93ED007A 		vldr.32	s14, [r3]
 195:Core/Src/main.c ****         {
 586              		.loc 1 195 38 discriminator 1 view .LVU134
 587 00b6 F4EE476A 		vcmp.f32	s13, s14
 588 00ba F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 589 00be CED0     		beq	.L30
 590 00c0 BCE7     		b	.L29
 591              	.L34:
 592 00c2 00BF     		.align	2
 593              	.L33:
 594 00c4 00000000 		.word	huart1
 595 00c8 00000000 		.word	rx_buffer
 596 00cc 00000000 		.word	angular_vel
 597 00d0 00000000 		.word	.LC0
 598 00d4 00000000 		.word	last_a_vel
 599 00d8 00000000 		.word	linear_vel
 600 00dc 00000000 		.word	last_l_vel
 601 00e0 00000000 		.word	.LANCHOR1
 602 00e4 00000240 		.word	1073872896
 603              		.cfi_endproc
 604              	.LFE133:
 606              		.comm	last_a_vel,4,4
 607              		.comm	last_l_vel,4,4
 608              		.comm	angular_vel,4,4
 609              		.comm	linear_vel,4,4
 610              		.global	vel_update_flag
 611              		.global	ready_flag
 612              		.comm	last_rx,1,1
 613              		.comm	prev_rx,1,1
ARM GAS  /tmp/ccFRXaCd.s 			page 22


 614              		.comm	data,8,4
 615              		.comm	tx_buffer,16,4
 616              		.comm	rx_buffer,16,4
 617              		.global	angular_a
 618              		.global	linear_a
 619              		.global	MSG
 620              		.section	.bss.ready_flag,"aw",%nobits
 621              		.set	.LANCHOR0,. + 0
 624              	ready_flag:
 625 0000 00       		.space	1
 626              		.section	.bss.vel_update_flag,"aw",%nobits
 627              		.set	.LANCHOR1,. + 0
 630              	vel_update_flag:
 631 0000 00       		.space	1
 632              		.section	.data.MSG,"aw"
 633              		.align	2
 636              	MSG:
 637 0000 496E6974 		.ascii	"Init\000"
 637      00
 638 0005 00000000 		.space	495
 638      00000000 
 638      00000000 
 638      00000000 
 638      00000000 
 639              		.section	.data.angular_a,"aw"
 640              		.align	2
 643              	angular_a:
 644 0000 0A00     		.ascii	"\012\000"
 645 0002 00000000 		.space	98
 645      00000000 
 645      00000000 
 645      00000000 
 645      00000000 
 646              		.section	.data.linear_a,"aw"
 647              		.align	2
 650              	linear_a:
 651 0000 0A00     		.ascii	"\012\000"
 652 0002 00000000 		.space	98
 652      00000000 
 652      00000000 
 652      00000000 
 652      00000000 
 653              		.text
 654              	.Letext0:
 655              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 656              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 657              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 658              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 659              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 660              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 661              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 662              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 663              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 664              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 665              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 666              		.file 14 "Core/Inc/tim.h"
 667              		.file 15 "Core/Inc/usart.h"
ARM GAS  /tmp/ccFRXaCd.s 			page 23


 668              		.file 16 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 669              		.file 17 "/usr/include/newlib/sys/_types.h"
 670              		.file 18 "/usr/include/newlib/sys/reent.h"
 671              		.file 19 "/usr/include/newlib/sys/lock.h"
 672              		.file 20 "/usr/include/newlib/time.h"
 673              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 674              		.file 22 "Core/Inc/gpio.h"
 675              		.file 23 "Core/Inc/dma.h"
 676              		.file 24 "Core/Inc/retarget.h"
 677              		.file 25 "/usr/include/newlib/stdio.h"
 678              		.file 26 "Core/Inc/frame_resolve.h"
 679              		.file 27 "<built-in>"
ARM GAS  /tmp/ccFRXaCd.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFRXaCd.s:18     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccFRXaCd.s:26     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccFRXaCd.s:56     .text.HAL_TIM_PeriodElapsedCallback:000000000000000c $d
     /tmp/ccFRXaCd.s:61     .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccFRXaCd.s:68     .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccFRXaCd.s:181    .text.HAL_UART_RxCpltCallback:0000000000000078 $d
                            *COM*:0000000000000010 rx_buffer
                            *COM*:0000000000000001 prev_rx
                            *COM*:0000000000000001 last_rx
     /tmp/ccFRXaCd.s:192    .text.dma_rx_cplt:0000000000000000 $t
     /tmp/ccFRXaCd.s:199    .text.dma_rx_cplt:0000000000000000 dma_rx_cplt
     /tmp/ccFRXaCd.s:219    .text.dma_rx_half_cplt:0000000000000000 $t
     /tmp/ccFRXaCd.s:226    .text.dma_rx_half_cplt:0000000000000000 dma_rx_half_cplt
     /tmp/ccFRXaCd.s:246    .text.Error_Handler:0000000000000000 $t
     /tmp/ccFRXaCd.s:253    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccFRXaCd.s:285    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFRXaCd.s:292    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFRXaCd.s:439    .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccFRXaCd.s:446    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccFRXaCd.s:450    .text.main:0000000000000000 $t
     /tmp/ccFRXaCd.s:457    .text.main:0000000000000000 main
     /tmp/ccFRXaCd.s:594    .text.main:00000000000000c4 $d
                            *COM*:0000000000000004 angular_vel
                            *COM*:0000000000000004 last_a_vel
                            *COM*:0000000000000004 linear_vel
                            *COM*:0000000000000004 last_l_vel
     /tmp/ccFRXaCd.s:630    .bss.vel_update_flag:0000000000000000 vel_update_flag
     /tmp/ccFRXaCd.s:624    .bss.ready_flag:0000000000000000 ready_flag
                            *COM*:0000000000000008 data
                            *COM*:0000000000000010 tx_buffer
     /tmp/ccFRXaCd.s:643    .data.angular_a:0000000000000000 angular_a
     /tmp/ccFRXaCd.s:650    .data.linear_a:0000000000000000 linear_a
     /tmp/ccFRXaCd.s:636    .data.MSG:0000000000000000 MSG
     /tmp/ccFRXaCd.s:625    .bss.ready_flag:0000000000000000 $d
     /tmp/ccFRXaCd.s:631    .bss.vel_update_flag:0000000000000000 $d
     /tmp/ccFRXaCd.s:633    .data.MSG:0000000000000000 $d
     /tmp/ccFRXaCd.s:640    .data.angular_a:0000000000000000 $d
     /tmp/ccFRXaCd.s:647    .data.linear_a:0000000000000000 $d

UNDEFINED SYMBOLS
htim5
HAL_UART_Receive_DMA
HAL_GPIO_TogglePin
huart1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_USART1_UART_Init
MX_TIM4_Init
MX_TIM3_Init
MX_TIM5_Init
ARM GAS  /tmp/ccFRXaCd.s 			page 25


MX_TIM2_Init
RetargetInit
printf
HAL_Delay
resolveRxFrame
