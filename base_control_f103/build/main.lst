ARM GAS  /tmp/ccNmp05w.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.map_speed,"ax",%progbits
  16              		.align	1
  17              		.global	map_speed
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	map_speed:
  25              	.LVL0:
  26              	.LFB70:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "dma.h"
  23:Core/Src/main.c **** #include "tim.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** #include "gpio.h"
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** #include <stdio.h>
  30:Core/Src/main.c **** #include <string.h>
  31:Core/Src/main.c **** #include "stm32f1xx_it.h"
ARM GAS  /tmp/ccNmp05w.s 			page 2


  32:Core/Src/main.c **** #include "stm32f103xb.h"
  33:Core/Src/main.c **** #include "stm32f1xx_hal.h"
  34:Core/Src/main.c **** #include "PID.h"
  35:Core/Src/main.c **** #include "config.h"
  36:Core/Src/main.c **** #include "frame_resolve.h"
  37:Core/Src/main.c **** #include "retarget.h"
  38:Core/Src/main.c **** #include "math.h"
  39:Core/Src/main.c **** /* USER CODE END Includes */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PTD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** #define FALSE   0
  50:Core/Src/main.c **** #define TRUE    1
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** // #define DEBUG
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PD */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  57:Core/Src/main.c **** /* USER CODE BEGIN PM */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END PM */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE BEGIN PV */
  64:Core/Src/main.c **** // Arrays
  65:Core/Src/main.c **** uint8_t MSG[500] = "Init";
  66:Core/Src/main.c **** uint8_t linear_a[100] = "\n";
  67:Core/Src/main.c **** uint8_t angular_a[100] = "\n";
  68:Core/Src/main.c **** uint8_t rx_buffer[RX_BUFFER_SIZE];
  69:Core/Src/main.c **** uint8_t tx_buffer[TX_BUFFER_SIZE];
  70:Core/Src/main.c **** uint8_t data[8];
  71:Core/Src/main.c **** uint8_t tx_state_frame[32];
  72:Core/Src/main.c **** uint8_t prev_rx, last_rx;
  73:Core/Src/main.c **** // Cross processes values 
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** #ifdef TEST_HARDWARE
  76:Core/Src/main.c **** volatile uint16_t cnt = 0;
  77:Core/Src/main.c **** volatile uint16_t last_cnt = 0;
  78:Core/Src/main.c **** volatile double enc_cnt = 0.0f;
  79:Core/Src/main.c **** volatile double last_enc_cnt = 0.0f;
  80:Core/Src/main.c **** #endif
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** volatile double right_set_speed = 0.0f; // RPM
  83:Core/Src/main.c **** volatile double left_set_speed = 0.0f; // RPM
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** #ifdef ENABLE_PID
  86:Core/Src/main.c **** /* PID Init Variables */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** double right_pid_params[3] = {RIGHT_MOTOR_KP , RIGHT_MOTOR_KI, RIGHT_MOTOR_KD};
ARM GAS  /tmp/ccNmp05w.s 			page 3


  89:Core/Src/main.c **** double left_pid_params[3] = {LEFT_MOTOR_KP , LEFT_MOTOR_KI, LEFT_MOTOR_KD};
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** // Custom typedef
  92:Core/Src/main.c **** MOTOR_TypeDef str_right_motor;
  93:Core/Src/main.c **** PID_TypeDef str_right_pid;
  94:Core/Src/main.c **** MOTOR_TypeDef str_left_motor;
  95:Core/Src/main.c **** PID_TypeDef str_left_pid;
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** #endif
  98:Core/Src/main.c **** /* Other definitions*/
  99:Core/Src/main.c **** uint8_t ready_flag = FALSE;
 100:Core/Src/main.c **** uint8_t pid_flag = FALSE;
 101:Core/Src/main.c **** volatile uint8_t    vel_update_flag = FALSE;
 102:Core/Src/main.c **** float linear_vel;
 103:Core/Src/main.c **** float angular_vel;
 104:Core/Src/main.c **** float last_l_vel, last_a_vel;
 105:Core/Src/main.c **** uint32_t tick, last_tick;
 106:Core/Src/main.c **** /* USER CODE END PV */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 109:Core/Src/main.c **** void SystemClock_Config(void);
 110:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* USER CODE END PFP */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 115:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* USER CODE END 0 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /**
 120:Core/Src/main.c ****   * @brief  The application entry point.
 121:Core/Src/main.c ****   * @retval int
 122:Core/Src/main.c ****   */
 123:Core/Src/main.c **** int main(void)
 124:Core/Src/main.c **** {
 125:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* USER CODE END 1 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 132:Core/Src/main.c ****   HAL_Init();
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE END Init */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Configure the system clock */
 139:Core/Src/main.c ****   SystemClock_Config();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE END SysInit */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* Initialize all configured peripherals */
ARM GAS  /tmp/ccNmp05w.s 			page 4


 146:Core/Src/main.c ****   MX_GPIO_Init();
 147:Core/Src/main.c ****   MX_DMA_Init();
 148:Core/Src/main.c ****   MX_TIM1_Init();
 149:Core/Src/main.c ****   MX_TIM2_Init();
 150:Core/Src/main.c ****   MX_TIM3_Init();
 151:Core/Src/main.c ****   MX_TIM4_Init();
 152:Core/Src/main.c ****   MX_USART1_UART_Init();
 153:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 154:Core/Src/main.c ****   RetargetInit(&huart1);
 155:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   #ifdef ENABLE_PID
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   PID_MotorInit(&str_right_motor, &str_right_pid, GPIOB, GPIO_PIN_6 , GPIO_PIN_7, 100.0f, 15.0f, &(
 160:Core/Src/main.c ****   PID_MotorInit(&str_left_motor, &str_left_pid, GPIOB, GPIO_PIN_4 , GPIO_PIN_5, 100.0f, 15.0f, &(TI
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   // Start Timer4 for PWM function on channel 3 and channel 4
 163:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 164:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   // Reset PWM Duty Cycle to zero on TIM 4 output channel 3 and channel 4
 167:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 168:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 169:Core/Src/main.c ****   
 170:Core/Src/main.c ****   // Start Timer3 for RIGHT Encoder Interfacing.
 171:Core/Src/main.c ****   HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 172:Core/Src/main.c ****   // Start Timer2 for LEFT Encoder Interfacing.
 173:Core/Src/main.c ****   HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   // Start Timer1 for control loop interrupt
 176:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim1);
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   #else 
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   //Test PWM
 181:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 182:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 183:Core/Src/main.c ****   // Start Timer4 for PWM function on channel 3 and channel 4
 184:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 185:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 186:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 30);
 187:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 30);
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   //Test control loop
 190:Core/Src/main.c ****   // Start Timer1 for sampling loop interrupt
 191:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim1);
 192:Core/Src/main.c ****   
 193:Core/Src/main.c ****   #endif
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   // Last update time in tick
 196:Core/Src/main.c ****   tick = HAL_GetTick();
 197:Core/Src/main.c ****   last_tick = HAL_GetTick();
 198:Core/Src/main.c ****   /* USER CODE END 2 */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* Infinite loop */
 201:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 202:Core/Src/main.c ****   while (1)
ARM GAS  /tmp/ccNmp05w.s 			page 5


 203:Core/Src/main.c ****   {
 204:Core/Src/main.c ****     /* USER CODE END WHILE */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 207:Core/Src/main.c ****       #ifdef ENABLE_PID
 208:Core/Src/main.c ****       if (vel_update_flag)
 209:Core/Src/main.c ****       {    
 210:Core/Src/main.c ****           resolveRxFrame(rx_buffer, &linear_vel, &angular_vel);
 211:Core/Src/main.c ****           
 212:Core/Src/main.c ****           // Convert from M/S to RPM
 213:Core/Src/main.c ****           if (linear_vel != last_l_vel || angular_vel != last_a_vel)
 214:Core/Src/main.c ****           {
 215:Core/Src/main.c ****             // Formular calculated base on ICC.   
 216:Core/Src/main.c ****             left_set_speed = ( linear_vel - angular_vel*ROBOT_WHEEL_BASE/2 ) * 60/ ( PI * ROBOT_WHE
 217:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 218:Core/Src/main.c ****           }
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****           #ifdef DEBUG
 221:Core/Src/main.c ****           if (linear_vel != last_l_vel || angular_vel != last_a_vel)
 222:Core/Src/main.c ****           {
 223:Core/Src/main.c ****               sprintf((char *)MSG, "R: %.5f | L: %.5f \n", right_set_speed, left_set_speed);
 224:Core/Src/main.c ****               HAL_UART_Transmit_DMA(&huart1 ,MSG, sizeof(MSG));
 225:Core/Src/main.c ****           }
 226:Core/Src/main.c ****           // HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 227:Core/Src/main.c ****           #endif
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****           last_a_vel = angular_vel;
 230:Core/Src/main.c ****           last_l_vel = linear_vel;
 231:Core/Src/main.c ****           vel_update_flag = FALSE;
 232:Core/Src/main.c ****       }
 233:Core/Src/main.c ****       #endif
 234:Core/Src/main.c ****       // Send 
 235:Core/Src/main.c ****       tick = HAL_GetTick();
 236:Core/Src/main.c ****       uint32_t dtick = tick - last_tick;
 237:Core/Src/main.c ****       if (dtick > 200)
 238:Core/Src/main.c ****       {
 239:Core/Src/main.c ****           // Publish odometry data
 240:Core/Src/main.c ****           // double vx = (str_right_motor.speed + str_left_motor.speed) * ( PI * ROBOT_WHEEL_DIAMET
 241:Core/Src/main.c ****           // double th = (str_right_motor.speed - str_left_motor.speed) * ( PI * ROBOT_WHEEL_DIAMET
 242:Core/Src/main.c ****           // double dt = dtick / 1000.0f;
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****           double vx = 0.2f; // M/s
 245:Core/Src/main.c ****           double th = 0.18f; // Rad/s
 246:Core/Src/main.c ****           double dt = dtick / 1000.0f;
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****           double delta_x = (vx * cos(th)) * dt;
 249:Core/Src/main.c ****           double delta_y = (vx * sin(th)) * dt;
 250:Core/Src/main.c ****           double delta_th = th * dt;
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****           parseTxStateFrame(tx_state_frame, delta_x, delta_y, delta_th);
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****           #ifdef DEBUG
 255:Core/Src/main.c ****           sprintf((char *)MSG, "X: %.5f | Y: %.5f | Theta: %.5f \n", delta_x, delta_y, delta_th);
 256:Core/Src/main.c ****           HAL_UART_Transmit_DMA(&huart1 ,MSG, sizeof(MSG));
 257:Core/Src/main.c ****           #endif
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****           HAL_UART_Transmit_DMA(&huart1 ,tx_state_frame, 32);
ARM GAS  /tmp/ccNmp05w.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****           last_tick = tick;
 262:Core/Src/main.c ****       }
 263:Core/Src/main.c ****     }
 264:Core/Src/main.c ****   /* USER CODE END 3 */
 265:Core/Src/main.c **** }
 266:Core/Src/main.c **** 
 267:Core/Src/main.c **** /**
 268:Core/Src/main.c ****   * @brief System Clock Configuration
 269:Core/Src/main.c ****   * @retval None
 270:Core/Src/main.c ****   */
 271:Core/Src/main.c **** void SystemClock_Config(void)
 272:Core/Src/main.c **** {
 273:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 274:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 277:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 278:Core/Src/main.c ****   */
 279:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 280:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 281:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 282:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 283:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 284:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 285:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 286:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 287:Core/Src/main.c ****   {
 288:Core/Src/main.c ****     Error_Handler();
 289:Core/Src/main.c ****   }
 290:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 291:Core/Src/main.c ****   */
 292:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 293:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 294:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 295:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 296:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 297:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 300:Core/Src/main.c ****   {
 301:Core/Src/main.c ****     Error_Handler();
 302:Core/Src/main.c ****   }
 303:Core/Src/main.c **** }
 304:Core/Src/main.c **** 
 305:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 306:Core/Src/main.c **** 
 307:Core/Src/main.c **** void map_speed(float a_vel, float l_vel, double *r_set_rpm, double *r_set_lpm)
 308:Core/Src/main.c **** {
  28              		.loc 1 308 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 309:Core/Src/main.c ****     __NOP();
  33              		.loc 1 309 5 view .LVU1
  34              		.syntax unified
ARM GAS  /tmp/ccNmp05w.s 			page 7


  35              	@ 309 "Core/Src/main.c" 1
  36 0000 00BF     		nop
  37              	@ 0 "" 2
 310:Core/Src/main.c **** }
  38              		.loc 1 310 1 is_stmt 0 view .LVU2
  39              		.thumb
  40              		.syntax unified
  41 0002 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE70:
  45              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  46              		.align	1
  47              		.global	HAL_TIM_PeriodElapsedCallback
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
  51              		.fpu softvfp
  53              	HAL_TIM_PeriodElapsedCallback:
  54              	.LVL1:
  55              	.LFB71:
 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** 
 313:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 314:Core/Src/main.c **** {
  56              		.loc 1 314 1 is_stmt 1 view -0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		.loc 1 314 1 is_stmt 0 view .LVU4
  61 0000 38B5     		push	{r3, r4, r5, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 16
  64              		.cfi_offset 3, -16
  65              		.cfi_offset 4, -12
  66              		.cfi_offset 5, -8
  67              		.cfi_offset 14, -4
 315:Core/Src/main.c ****   if (htim == &htim1)
  68              		.loc 1 315 3 is_stmt 1 view .LVU5
  69              		.loc 1 315 6 is_stmt 0 view .LVU6
  70 0002 0F4B     		ldr	r3, .L6
  71 0004 8342     		cmp	r3, r0
  72 0006 00D0     		beq	.L5
  73              	.LVL2:
  74              	.L2:
 316:Core/Src/main.c ****   {
 317:Core/Src/main.c ****     #ifdef TEST_HARDWARE
 318:Core/Src/main.c ****     // Do sampling and calculate stuff
 319:Core/Src/main.c ****     cnt++;
 320:Core/Src/main.c ****     if (cnt == 100)
 321:Core/Src/main.c ****     {
 322:Core/Src/main.c ****         
 323:Core/Src/main.c ****         enc_cnt = TIM3->CNT;
 324:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 325:Core/Src/main.c ****         if (enc_cnt!=last_enc_cnt)
 326:Core/Src/main.c ****         {
 327:Core/Src/main.c ****           sprintf((char *)period, "-> %d pulses/sec\n", (enc_cnt-last_enc_cnt));
 328:Core/Src/main.c ****           HAL_UART_Transmit_DMA(&huart1, period, sizeof(period));
ARM GAS  /tmp/ccNmp05w.s 			page 8


 329:Core/Src/main.c ****         }
 330:Core/Src/main.c ****         cnt = 0;
 331:Core/Src/main.c ****         last_enc_cnt = enc_cnt;
 332:Core/Src/main.c ****         
 333:Core/Src/main.c ****     }
 334:Core/Src/main.c ****     #endif
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****     #ifdef ENABLE_PID
 337:Core/Src/main.c ****     /* =================
 338:Core/Src/main.c ****     * MAIN PID CLOSE-LOOP SAMPLING AND COMPUTE
 339:Core/Src/main.c ****     *  =================== */
 340:Core/Src/main.c ****     // RIGHT MOTOR PI CONTROL 
 341:Core/Src/main.c ****     PID_PreProcess(&str_right_motor, right_set_speed);
 342:Core/Src/main.c ****     PID_PreProcess(&str_left_motor, left_set_speed);
 343:Core/Src/main.c ****     PID_ComputeOutput(&str_right_motor);
 344:Core/Src/main.c ****     PID_ComputeOutput(&str_left_motor);
 345:Core/Src/main.c ****     PID_SetDuty(&str_right_motor );
 346:Core/Src/main.c ****     PID_SetDuty(&str_left_motor );
 347:Core/Src/main.c ****     #else 
 348:Core/Src/main.c ****     static uint32_t counter = 0;
 349:Core/Src/main.c ****     if (counter >= 100)
 350:Core/Src/main.c ****     {
 351:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 352:Core/Src/main.c ****       counter = 0;
 353:Core/Src/main.c ****     }
 354:Core/Src/main.c ****     counter++;  
 355:Core/Src/main.c ****     #endif
 356:Core/Src/main.c ****   }
 357:Core/Src/main.c **** }
  75              		.loc 1 357 1 view .LVU7
  76 0008 38BD     		pop	{r3, r4, r5, pc}
  77              	.LVL3:
  78              	.L5:
 341:Core/Src/main.c ****     PID_PreProcess(&str_left_motor, left_set_speed);
  79              		.loc 1 341 5 is_stmt 1 view .LVU8
  80 000a 0E4D     		ldr	r5, .L6+4
  81 000c 0E4B     		ldr	r3, .L6+8
  82 000e D3E90023 		ldrd	r2, [r3]
  83 0012 2846     		mov	r0, r5
  84              	.LVL4:
 341:Core/Src/main.c ****     PID_PreProcess(&str_left_motor, left_set_speed);
  85              		.loc 1 341 5 is_stmt 0 view .LVU9
  86 0014 FFF7FEFF 		bl	PID_PreProcess
  87              	.LVL5:
 342:Core/Src/main.c ****     PID_ComputeOutput(&str_right_motor);
  88              		.loc 1 342 5 is_stmt 1 view .LVU10
  89 0018 0C4C     		ldr	r4, .L6+12
  90 001a 0D4B     		ldr	r3, .L6+16
  91 001c D3E90023 		ldrd	r2, [r3]
  92 0020 2046     		mov	r0, r4
  93 0022 FFF7FEFF 		bl	PID_PreProcess
  94              	.LVL6:
 343:Core/Src/main.c ****     PID_ComputeOutput(&str_left_motor);
  95              		.loc 1 343 5 view .LVU11
  96 0026 2846     		mov	r0, r5
  97 0028 FFF7FEFF 		bl	PID_ComputeOutput
  98              	.LVL7:
ARM GAS  /tmp/ccNmp05w.s 			page 9


 344:Core/Src/main.c ****     PID_SetDuty(&str_right_motor );
  99              		.loc 1 344 5 view .LVU12
 100 002c 2046     		mov	r0, r4
 101 002e FFF7FEFF 		bl	PID_ComputeOutput
 102              	.LVL8:
 345:Core/Src/main.c ****     PID_SetDuty(&str_left_motor );
 103              		.loc 1 345 5 view .LVU13
 104 0032 2846     		mov	r0, r5
 105 0034 FFF7FEFF 		bl	PID_SetDuty
 106              	.LVL9:
 346:Core/Src/main.c ****     #else 
 107              		.loc 1 346 5 view .LVU14
 108 0038 2046     		mov	r0, r4
 109 003a FFF7FEFF 		bl	PID_SetDuty
 110              	.LVL10:
 111              		.loc 1 357 1 is_stmt 0 view .LVU15
 112 003e E3E7     		b	.L2
 113              	.L7:
 114              		.align	2
 115              	.L6:
 116 0040 00000000 		.word	htim1
 117 0044 00000000 		.word	str_right_motor
 118 0048 00000000 		.word	.LANCHOR0
 119 004c 00000000 		.word	str_left_motor
 120 0050 00000000 		.word	.LANCHOR1
 121              		.cfi_endproc
 122              	.LFE71:
 124              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 125              		.align	1
 126              		.global	HAL_UART_RxCpltCallback
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu softvfp
 132              	HAL_UART_RxCpltCallback:
 133              	.LVL11:
 134              	.LFB72:
 358:Core/Src/main.c **** 
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 361:Core/Src/main.c **** {
 135              		.loc 1 361 1 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		.loc 1 361 1 is_stmt 0 view .LVU17
 140 0000 08B5     		push	{r3, lr}
 141              	.LCFI1:
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 3, -8
 144              		.cfi_offset 14, -4
 362:Core/Src/main.c ****     
 363:Core/Src/main.c ****     if (ready_flag == TRUE)
 145              		.loc 1 363 5 is_stmt 1 view .LVU18
 146              		.loc 1 363 20 is_stmt 0 view .LVU19
 147 0002 1B4B     		ldr	r3, .L15
 148 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccNmp05w.s 			page 10


 149              		.loc 1 363 8 view .LVU20
 150 0006 012B     		cmp	r3, #1
 151 0008 14D0     		beq	.L13
 364:Core/Src/main.c ****     {
 365:Core/Src/main.c ****         vel_update_flag = TRUE;
 366:Core/Src/main.c ****         ready_flag = FALSE;
 367:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 368:Core/Src/main.c ****     }
 369:Core/Src/main.c ****     else
 370:Core/Src/main.c ****     {
 371:Core/Src/main.c ****         if (rx_buffer[0] == 0x16 && prev_rx == 0x16 && last_rx == 0x16) // SYN
 152              		.loc 1 371 9 is_stmt 1 view .LVU21
 153              		.loc 1 371 22 is_stmt 0 view .LVU22
 154 000a 1A4B     		ldr	r3, .L15+4
 155 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 156              		.loc 1 371 12 view .LVU23
 157 000e 162B     		cmp	r3, #22
 158 0010 03D1     		bne	.L11
 159              		.loc 1 371 45 discriminator 1 view .LVU24
 160 0012 194B     		ldr	r3, .L15+8
 161 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 162              		.loc 1 371 34 discriminator 1 view .LVU25
 163 0016 162B     		cmp	r3, #22
 164 0018 17D0     		beq	.L14
 165              	.L11:
 372:Core/Src/main.c ****         {
 373:Core/Src/main.c ****             ready_flag = TRUE;
 374:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 375:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE);   
 376:Core/Src/main.c ****         }
 377:Core/Src/main.c ****         else
 378:Core/Src/main.c ****         {
 379:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 166              		.loc 1 379 13 is_stmt 1 view .LVU26
 167 001a 0122     		movs	r2, #1
 168 001c 1549     		ldr	r1, .L15+4
 169 001e 1748     		ldr	r0, .L15+12
 170              	.LVL12:
 171              		.loc 1 379 13 is_stmt 0 view .LVU27
 172 0020 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 173              	.LVL13:
 174              	.L10:
 380:Core/Src/main.c ****         }
 381:Core/Src/main.c ****     } 
 382:Core/Src/main.c ****     last_rx = prev_rx;
 175              		.loc 1 382 5 is_stmt 1 view .LVU28
 176              		.loc 1 382 13 is_stmt 0 view .LVU29
 177 0024 144B     		ldr	r3, .L15+8
 178 0026 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 179 0028 154A     		ldr	r2, .L15+16
 180 002a 1170     		strb	r1, [r2]
 383:Core/Src/main.c ****     prev_rx = rx_buffer[0];
 181              		.loc 1 383 5 is_stmt 1 view .LVU30
 182              		.loc 1 383 24 is_stmt 0 view .LVU31
 183 002c 114A     		ldr	r2, .L15+4
 184 002e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 185              		.loc 1 383 13 view .LVU32
ARM GAS  /tmp/ccNmp05w.s 			page 11


 186 0030 1A70     		strb	r2, [r3]
 384:Core/Src/main.c **** }
 187              		.loc 1 384 1 view .LVU33
 188 0032 08BD     		pop	{r3, pc}
 189              	.LVL14:
 190              	.L13:
 365:Core/Src/main.c ****         ready_flag = FALSE;
 191              		.loc 1 365 9 is_stmt 1 view .LVU34
 365:Core/Src/main.c ****         ready_flag = FALSE;
 192              		.loc 1 365 25 is_stmt 0 view .LVU35
 193 0034 0122     		movs	r2, #1
 194 0036 134B     		ldr	r3, .L15+20
 195 0038 1A70     		strb	r2, [r3]
 366:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 196              		.loc 1 366 9 is_stmt 1 view .LVU36
 366:Core/Src/main.c ****         HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 197              		.loc 1 366 20 is_stmt 0 view .LVU37
 198 003a 0D4B     		ldr	r3, .L15
 199 003c 0021     		movs	r1, #0
 200 003e 1970     		strb	r1, [r3]
 367:Core/Src/main.c ****     }
 201              		.loc 1 367 9 is_stmt 1 view .LVU38
 202 0040 0C49     		ldr	r1, .L15+4
 203 0042 0E48     		ldr	r0, .L15+12
 204              	.LVL15:
 367:Core/Src/main.c ****     }
 205              		.loc 1 367 9 is_stmt 0 view .LVU39
 206 0044 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 207              	.LVL16:
 208 0048 ECE7     		b	.L10
 209              	.LVL17:
 210              	.L14:
 371:Core/Src/main.c ****         {
 211              		.loc 1 371 64 discriminator 2 view .LVU40
 212 004a 0D4B     		ldr	r3, .L15+16
 213 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 371:Core/Src/main.c ****         {
 214              		.loc 1 371 53 discriminator 2 view .LVU41
 215 004e 162B     		cmp	r3, #22
 216 0050 E3D1     		bne	.L11
 373:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 217              		.loc 1 373 13 is_stmt 1 view .LVU42
 373:Core/Src/main.c ****             memset(rx_buffer, 0, RX_BUFFER_SIZE);
 218              		.loc 1 373 24 is_stmt 0 view .LVU43
 219 0052 074B     		ldr	r3, .L15
 220 0054 0122     		movs	r2, #1
 221 0056 1A70     		strb	r2, [r3]
 374:Core/Src/main.c ****             HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE);   
 222              		.loc 1 374 13 is_stmt 1 view .LVU44
 223 0058 0649     		ldr	r1, .L15+4
 224 005a 0023     		movs	r3, #0
 225 005c 0B60     		str	r3, [r1]	@ unaligned
 226 005e 4B60     		str	r3, [r1, #4]	@ unaligned
 227 0060 8B60     		str	r3, [r1, #8]	@ unaligned
 228 0062 CB60     		str	r3, [r1, #12]	@ unaligned
 375:Core/Src/main.c ****         }
 229              		.loc 1 375 13 view .LVU45
ARM GAS  /tmp/ccNmp05w.s 			page 12


 230 0064 1022     		movs	r2, #16
 231 0066 0548     		ldr	r0, .L15+12
 232              	.LVL18:
 375:Core/Src/main.c ****         }
 233              		.loc 1 375 13 is_stmt 0 view .LVU46
 234 0068 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 235              	.LVL19:
 236 006c DAE7     		b	.L10
 237              	.L16:
 238 006e 00BF     		.align	2
 239              	.L15:
 240 0070 00000000 		.word	.LANCHOR2
 241 0074 00000000 		.word	rx_buffer
 242 0078 00000000 		.word	prev_rx
 243 007c 00000000 		.word	huart1
 244 0080 00000000 		.word	last_rx
 245 0084 00000000 		.word	.LANCHOR3
 246              		.cfi_endproc
 247              	.LFE72:
 249              		.section	.text.Error_Handler,"ax",%progbits
 250              		.align	1
 251              		.global	Error_Handler
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu softvfp
 257              	Error_Handler:
 258              	.LFB73:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** 
 387:Core/Src/main.c **** /* USER CODE END 4 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c **** /**
 390:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 391:Core/Src/main.c ****   * @retval None
 392:Core/Src/main.c ****   */
 393:Core/Src/main.c **** void Error_Handler(void)
 394:Core/Src/main.c **** {
 259              		.loc 1 394 1 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ Volatile: function does not return.
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 395:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 396:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 397:Core/Src/main.c ****   __disable_irq();
 265              		.loc 1 397 3 view .LVU48
 266              	.LBB4:
 267              	.LBI4:
 268              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  /tmp/ccNmp05w.s 			page 13


   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccNmp05w.s 			page 14


  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/ccNmp05w.s 			page 15


 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 269              		.loc 2 140 27 view .LVU49
 270              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 271              		.loc 2 142 3 view .LVU50
 272              		.syntax unified
 273              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 274 0000 72B6     		cpsid i
 275              	@ 0 "" 2
 276              		.thumb
 277              		.syntax unified
 278              	.L18:
 279              	.LBE5:
 280              	.LBE4:
 398:Core/Src/main.c ****   while (1)
 281              		.loc 1 398 3 discriminator 1 view .LVU51
 399:Core/Src/main.c ****   {
 400:Core/Src/main.c ****   }
 282              		.loc 1 400 3 discriminator 1 view .LVU52
 398:Core/Src/main.c ****   while (1)
 283              		.loc 1 398 9 discriminator 1 view .LVU53
 284 0002 FEE7     		b	.L18
 285              		.cfi_endproc
 286              	.LFE73:
 288              		.section	.text.SystemClock_Config,"ax",%progbits
 289              		.align	1
 290              		.global	SystemClock_Config
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu softvfp
 296              	SystemClock_Config:
 297              	.LFB69:
 272:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 298              		.loc 1 272 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 64
ARM GAS  /tmp/ccNmp05w.s 			page 16


 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 00B5     		push	{lr}
 303              	.LCFI2:
 304              		.cfi_def_cfa_offset 4
 305              		.cfi_offset 14, -4
 306 0002 91B0     		sub	sp, sp, #68
 307              	.LCFI3:
 308              		.cfi_def_cfa_offset 72
 273:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 309              		.loc 1 273 3 view .LVU55
 273:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 310              		.loc 1 273 22 is_stmt 0 view .LVU56
 311 0004 0023     		movs	r3, #0
 312 0006 0993     		str	r3, [sp, #36]
 313 0008 0B93     		str	r3, [sp, #44]
 314 000a 0C93     		str	r3, [sp, #48]
 274:Core/Src/main.c **** 
 315              		.loc 1 274 3 is_stmt 1 view .LVU57
 274:Core/Src/main.c **** 
 316              		.loc 1 274 22 is_stmt 0 view .LVU58
 317 000c 0193     		str	r3, [sp, #4]
 318 000e 0293     		str	r3, [sp, #8]
 319 0010 0393     		str	r3, [sp, #12]
 320 0012 0493     		str	r3, [sp, #16]
 321 0014 0593     		str	r3, [sp, #20]
 279:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 322              		.loc 1 279 3 is_stmt 1 view .LVU59
 279:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 323              		.loc 1 279 36 is_stmt 0 view .LVU60
 324 0016 0121     		movs	r1, #1
 325 0018 0691     		str	r1, [sp, #24]
 280:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 326              		.loc 1 280 3 is_stmt 1 view .LVU61
 280:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 327              		.loc 1 280 30 is_stmt 0 view .LVU62
 328 001a 4FF48032 		mov	r2, #65536
 329 001e 0792     		str	r2, [sp, #28]
 281:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 330              		.loc 1 281 3 is_stmt 1 view .LVU63
 281:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 331              		.loc 1 281 36 is_stmt 0 view .LVU64
 332 0020 0893     		str	r3, [sp, #32]
 282:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 333              		.loc 1 282 3 is_stmt 1 view .LVU65
 282:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 334              		.loc 1 282 30 is_stmt 0 view .LVU66
 335 0022 0A91     		str	r1, [sp, #40]
 283:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 336              		.loc 1 283 3 is_stmt 1 view .LVU67
 283:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 337              		.loc 1 283 34 is_stmt 0 view .LVU68
 338 0024 0223     		movs	r3, #2
 339 0026 0D93     		str	r3, [sp, #52]
 284:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 340              		.loc 1 284 3 is_stmt 1 view .LVU69
 284:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 341              		.loc 1 284 35 is_stmt 0 view .LVU70
ARM GAS  /tmp/ccNmp05w.s 			page 17


 342 0028 0E92     		str	r2, [sp, #56]
 285:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 343              		.loc 1 285 3 is_stmt 1 view .LVU71
 285:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 344              		.loc 1 285 32 is_stmt 0 view .LVU72
 345 002a 4FF4E013 		mov	r3, #1835008
 346 002e 0F93     		str	r3, [sp, #60]
 286:Core/Src/main.c ****   {
 347              		.loc 1 286 3 is_stmt 1 view .LVU73
 286:Core/Src/main.c ****   {
 348              		.loc 1 286 7 is_stmt 0 view .LVU74
 349 0030 06A8     		add	r0, sp, #24
 350 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 351              	.LVL20:
 286:Core/Src/main.c ****   {
 352              		.loc 1 286 6 view .LVU75
 353 0036 80B9     		cbnz	r0, .L23
 292:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 354              		.loc 1 292 3 is_stmt 1 view .LVU76
 292:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 355              		.loc 1 292 31 is_stmt 0 view .LVU77
 356 0038 0F23     		movs	r3, #15
 357 003a 0193     		str	r3, [sp, #4]
 294:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 358              		.loc 1 294 3 is_stmt 1 view .LVU78
 294:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 359              		.loc 1 294 34 is_stmt 0 view .LVU79
 360 003c 0221     		movs	r1, #2
 361 003e 0291     		str	r1, [sp, #8]
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 362              		.loc 1 295 3 is_stmt 1 view .LVU80
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 363              		.loc 1 295 35 is_stmt 0 view .LVU81
 364 0040 0023     		movs	r3, #0
 365 0042 0393     		str	r3, [sp, #12]
 296:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 366              		.loc 1 296 3 is_stmt 1 view .LVU82
 296:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 367              		.loc 1 296 36 is_stmt 0 view .LVU83
 368 0044 4FF48062 		mov	r2, #1024
 369 0048 0492     		str	r2, [sp, #16]
 297:Core/Src/main.c **** 
 370              		.loc 1 297 3 is_stmt 1 view .LVU84
 297:Core/Src/main.c **** 
 371              		.loc 1 297 36 is_stmt 0 view .LVU85
 372 004a 0593     		str	r3, [sp, #20]
 299:Core/Src/main.c ****   {
 373              		.loc 1 299 3 is_stmt 1 view .LVU86
 299:Core/Src/main.c ****   {
 374              		.loc 1 299 7 is_stmt 0 view .LVU87
 375 004c 01A8     		add	r0, sp, #4
 376 004e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 377              	.LVL21:
 299:Core/Src/main.c ****   {
 378              		.loc 1 299 6 view .LVU88
 379 0052 20B9     		cbnz	r0, .L24
 303:Core/Src/main.c **** 
ARM GAS  /tmp/ccNmp05w.s 			page 18


 380              		.loc 1 303 1 view .LVU89
 381 0054 11B0     		add	sp, sp, #68
 382              	.LCFI4:
 383              		.cfi_remember_state
 384              		.cfi_def_cfa_offset 4
 385              		@ sp needed
 386 0056 5DF804FB 		ldr	pc, [sp], #4
 387              	.L23:
 388              	.LCFI5:
 389              		.cfi_restore_state
 288:Core/Src/main.c ****   }
 390              		.loc 1 288 5 is_stmt 1 view .LVU90
 391 005a FFF7FEFF 		bl	Error_Handler
 392              	.LVL22:
 393              	.L24:
 301:Core/Src/main.c ****   }
 394              		.loc 1 301 5 view .LVU91
 395 005e FFF7FEFF 		bl	Error_Handler
 396              	.LVL23:
 397              		.cfi_endproc
 398              	.LFE69:
 400              		.global	__aeabi_fcmpeq
 401              		.global	__aeabi_fmul
 402              		.global	__aeabi_fsub
 403              		.global	__aeabi_f2d
 404              		.global	__aeabi_ddiv
 405              		.global	__aeabi_fadd
 406              		.global	__aeabi_ui2f
 407              		.global	__aeabi_fdiv
 408              		.global	__aeabi_dmul
 409              		.section	.text.main,"ax",%progbits
 410              		.align	1
 411              		.global	main
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu softvfp
 417              	main:
 418              	.LFB68:
 124:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 419              		.loc 1 124 1 view -0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 424              	.LCFI6:
 425              		.cfi_def_cfa_offset 28
 426              		.cfi_offset 4, -28
 427              		.cfi_offset 5, -24
 428              		.cfi_offset 6, -20
 429              		.cfi_offset 7, -16
 430              		.cfi_offset 8, -12
 431              		.cfi_offset 9, -8
 432              		.cfi_offset 14, -4
 433 0004 8BB0     		sub	sp, sp, #44
 434              	.LCFI7:
 435              		.cfi_def_cfa_offset 72
ARM GAS  /tmp/ccNmp05w.s 			page 19


 132:Core/Src/main.c **** 
 436              		.loc 1 132 3 view .LVU93
 437 0006 FFF7FEFF 		bl	HAL_Init
 438              	.LVL24:
 139:Core/Src/main.c **** 
 439              		.loc 1 139 3 view .LVU94
 440 000a FFF7FEFF 		bl	SystemClock_Config
 441              	.LVL25:
 146:Core/Src/main.c ****   MX_DMA_Init();
 442              		.loc 1 146 3 view .LVU95
 443 000e FFF7FEFF 		bl	MX_GPIO_Init
 444              	.LVL26:
 147:Core/Src/main.c ****   MX_TIM1_Init();
 445              		.loc 1 147 3 view .LVU96
 446 0012 FFF7FEFF 		bl	MX_DMA_Init
 447              	.LVL27:
 148:Core/Src/main.c ****   MX_TIM2_Init();
 448              		.loc 1 148 3 view .LVU97
 449 0016 FFF7FEFF 		bl	MX_TIM1_Init
 450              	.LVL28:
 149:Core/Src/main.c ****   MX_TIM3_Init();
 451              		.loc 1 149 3 view .LVU98
 452 001a FFF7FEFF 		bl	MX_TIM2_Init
 453              	.LVL29:
 150:Core/Src/main.c ****   MX_TIM4_Init();
 454              		.loc 1 150 3 view .LVU99
 455 001e FFF7FEFF 		bl	MX_TIM3_Init
 456              	.LVL30:
 151:Core/Src/main.c ****   MX_USART1_UART_Init();
 457              		.loc 1 151 3 view .LVU100
 458 0022 FFF7FEFF 		bl	MX_TIM4_Init
 459              	.LVL31:
 152:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 460              		.loc 1 152 3 view .LVU101
 461 0026 FFF7FEFF 		bl	MX_USART1_UART_Init
 462              	.LVL32:
 154:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 463              		.loc 1 154 3 view .LVU102
 464 002a 794C     		ldr	r4, .L35+32
 465 002c 2046     		mov	r0, r4
 466 002e FFF7FEFF 		bl	RetargetInit
 467              	.LVL33:
 155:Core/Src/main.c **** 
 468              		.loc 1 155 3 view .LVU103
 469 0032 0122     		movs	r2, #1
 470 0034 7749     		ldr	r1, .L35+36
 471 0036 2046     		mov	r0, r4
 472 0038 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 473              	.LVL34:
 159:Core/Src/main.c ****   PID_MotorInit(&str_left_motor, &str_left_pid, GPIOB, GPIO_PIN_4 , GPIO_PIN_5, 100.0f, 15.0f, &(TI
 474              		.loc 1 159 3 view .LVU104
 475 003c 764C     		ldr	r4, .L35+40
 476 003e 774B     		ldr	r3, .L35+44
 477 0040 0893     		str	r3, [sp, #32]
 478 0042 774B     		ldr	r3, .L35+48
 479 0044 0793     		str	r3, [sp, #28]
 480 0046 A3F58363 		sub	r3, r3, #1048
ARM GAS  /tmp/ccNmp05w.s 			page 20


 481 004a 0693     		str	r3, [sp, #24]
 482 004c 4FF00008 		mov	r8, #0
 483 0050 DFF83092 		ldr	r9, .L35+148
 484 0054 CDE90489 		strd	r8, [sp, #16]
 485 0058 0026     		movs	r6, #0
 486 005a 724F     		ldr	r7, .L35+52
 487 005c CDE90267 		strd	r6, [sp, #8]
 488 0060 8023     		movs	r3, #128
 489 0062 0093     		str	r3, [sp]
 490 0064 4023     		movs	r3, #64
 491 0066 2246     		mov	r2, r4
 492 0068 6F49     		ldr	r1, .L35+56
 493 006a 7048     		ldr	r0, .L35+60
 494 006c FFF7FEFF 		bl	PID_MotorInit
 495              	.LVL35:
 160:Core/Src/main.c **** 
 496              		.loc 1 160 3 view .LVU105
 497 0070 6F4B     		ldr	r3, .L35+64
 498 0072 0893     		str	r3, [sp, #32]
 499 0074 6F4B     		ldr	r3, .L35+68
 500 0076 0793     		str	r3, [sp, #28]
 501 0078 A3F61C03 		subw	r3, r3, #2076
 502 007c 0693     		str	r3, [sp, #24]
 503 007e CDE90489 		strd	r8, [sp, #16]
 504 0082 CDE90267 		strd	r6, [sp, #8]
 505 0086 2023     		movs	r3, #32
 506 0088 0093     		str	r3, [sp]
 507 008a 1023     		movs	r3, #16
 508 008c 2246     		mov	r2, r4
 509 008e 6A49     		ldr	r1, .L35+72
 510 0090 6A48     		ldr	r0, .L35+76
 511 0092 FFF7FEFF 		bl	PID_MotorInit
 512              	.LVL36:
 163:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 513              		.loc 1 163 3 view .LVU106
 514 0096 6A4C     		ldr	r4, .L35+80
 515 0098 0821     		movs	r1, #8
 516 009a 2046     		mov	r0, r4
 517 009c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 518              	.LVL37:
 164:Core/Src/main.c **** 
 519              		.loc 1 164 3 view .LVU107
 520 00a0 0C21     		movs	r1, #12
 521 00a2 2046     		mov	r0, r4
 522 00a4 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 523              	.LVL38:
 167:Core/Src/main.c ****   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 524              		.loc 1 167 3 view .LVU108
 525 00a8 2368     		ldr	r3, [r4]
 526 00aa 0022     		movs	r2, #0
 527 00ac DA63     		str	r2, [r3, #60]
 168:Core/Src/main.c ****   
 528              		.loc 1 168 3 view .LVU109
 529 00ae 1A64     		str	r2, [r3, #64]
 171:Core/Src/main.c ****   // Start Timer2 for LEFT Encoder Interfacing.
 530              		.loc 1 171 3 view .LVU110
 531 00b0 3C21     		movs	r1, #60
ARM GAS  /tmp/ccNmp05w.s 			page 21


 532 00b2 6448     		ldr	r0, .L35+84
 533 00b4 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 534              	.LVL39:
 173:Core/Src/main.c **** 
 535              		.loc 1 173 3 view .LVU111
 536 00b8 3C21     		movs	r1, #60
 537 00ba 6348     		ldr	r0, .L35+88
 538 00bc FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 539              	.LVL40:
 176:Core/Src/main.c **** 
 540              		.loc 1 176 3 view .LVU112
 541 00c0 6248     		ldr	r0, .L35+92
 542 00c2 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 543              	.LVL41:
 196:Core/Src/main.c ****   last_tick = HAL_GetTick();
 544              		.loc 1 196 3 view .LVU113
 196:Core/Src/main.c ****   last_tick = HAL_GetTick();
 545              		.loc 1 196 10 is_stmt 0 view .LVU114
 546 00c6 FFF7FEFF 		bl	HAL_GetTick
 547              	.LVL42:
 196:Core/Src/main.c ****   last_tick = HAL_GetTick();
 548              		.loc 1 196 8 view .LVU115
 549 00ca 614B     		ldr	r3, .L35+96
 550 00cc 1860     		str	r0, [r3]
 197:Core/Src/main.c ****   /* USER CODE END 2 */
 551              		.loc 1 197 3 is_stmt 1 view .LVU116
 197:Core/Src/main.c ****   /* USER CODE END 2 */
 552              		.loc 1 197 15 is_stmt 0 view .LVU117
 553 00ce FFF7FEFF 		bl	HAL_GetTick
 554              	.LVL43:
 197:Core/Src/main.c ****   /* USER CODE END 2 */
 555              		.loc 1 197 13 view .LVU118
 556 00d2 604B     		ldr	r3, .L35+100
 557 00d4 1860     		str	r0, [r3]
 558 00d6 7CE0     		b	.L30
 559              	.L33:
 560              	.LBB6:
 210:Core/Src/main.c ****           
 561              		.loc 1 210 11 is_stmt 1 view .LVU119
 562 00d8 5F4C     		ldr	r4, .L35+104
 563 00da 604A     		ldr	r2, .L35+108
 564 00dc 2146     		mov	r1, r4
 565 00de 4D48     		ldr	r0, .L35+36
 566 00e0 FFF7FEFF 		bl	resolveRxFrame
 567              	.LVL44:
 213:Core/Src/main.c ****           {
 568              		.loc 1 213 11 view .LVU120
 213:Core/Src/main.c ****           {
 569              		.loc 1 213 26 is_stmt 0 view .LVU121
 570 00e4 2468     		ldr	r4, [r4]	@ float
 213:Core/Src/main.c ****           {
 571              		.loc 1 213 14 view .LVU122
 572 00e6 5E4B     		ldr	r3, .L35+112
 573 00e8 1968     		ldr	r1, [r3]	@ float
 574 00ea 2046     		mov	r0, r4
 575 00ec FFF7FEFF 		bl	__aeabi_fcmpeq
 576              	.LVL45:
ARM GAS  /tmp/ccNmp05w.s 			page 22


 577 00f0 30B1     		cbz	r0, .L27
 213:Core/Src/main.c ****           {
 578              		.loc 1 213 40 discriminator 1 view .LVU123
 579 00f2 5C4B     		ldr	r3, .L35+116
 580 00f4 1968     		ldr	r1, [r3]	@ float
 581 00f6 594B     		ldr	r3, .L35+108
 582 00f8 1868     		ldr	r0, [r3]	@ float
 583 00fa FFF7FEFF 		bl	__aeabi_fcmpeq
 584              	.LVL46:
 585 00fe 58BB     		cbnz	r0, .L28
 586              	.L27:
 216:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 587              		.loc 1 216 13 is_stmt 1 view .LVU124
 216:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 588              		.loc 1 216 56 is_stmt 0 view .LVU125
 589 0100 5949     		ldr	r1, .L35+120
 590 0102 564B     		ldr	r3, .L35+108
 591 0104 1868     		ldr	r0, [r3]	@ float
 592 0106 FFF7FEFF 		bl	__aeabi_fmul
 593              	.LVL47:
 216:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 594              		.loc 1 216 73 view .LVU126
 595 010a 4FF07C51 		mov	r1, #1056964608
 596 010e FFF7FEFF 		bl	__aeabi_fmul
 597              	.LVL48:
 598 0112 0546     		mov	r5, r0
 216:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 599              		.loc 1 216 43 view .LVU127
 600 0114 0146     		mov	r1, r0
 601 0116 2046     		mov	r0, r4
 602 0118 FFF7FEFF 		bl	__aeabi_fsub
 603              	.LVL49:
 216:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 604              		.loc 1 216 78 view .LVU128
 605 011c 5349     		ldr	r1, .L35+124
 606 011e FFF7FEFF 		bl	__aeabi_fmul
 607              	.LVL50:
 608 0122 FFF7FEFF 		bl	__aeabi_f2d
 609              	.LVL51:
 216:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 610              		.loc 1 216 82 view .LVU129
 611 0126 32A3     		adr	r3, .L35
 612 0128 D3E90023 		ldrd	r2, [r3]
 613 012c FFF7FEFF 		bl	__aeabi_ddiv
 614              	.LVL52:
 216:Core/Src/main.c ****             right_set_speed = ( linear_vel + angular_vel*ROBOT_WHEEL_BASE/2) * 60/ ( PI * ROBOT_WHE
 615              		.loc 1 216 28 view .LVU130
 616 0130 4F4B     		ldr	r3, .L35+128
 617 0132 C3E90001 		strd	r0, [r3]
 217:Core/Src/main.c ****           }
 618              		.loc 1 217 13 is_stmt 1 view .LVU131
 217:Core/Src/main.c ****           }
 619              		.loc 1 217 44 is_stmt 0 view .LVU132
 620 0136 2946     		mov	r1, r5
 621 0138 2046     		mov	r0, r4
 622 013a FFF7FEFF 		bl	__aeabi_fadd
 623              	.LVL53:
ARM GAS  /tmp/ccNmp05w.s 			page 23


 217:Core/Src/main.c ****           }
 624              		.loc 1 217 78 view .LVU133
 625 013e 4B49     		ldr	r1, .L35+124
 626 0140 FFF7FEFF 		bl	__aeabi_fmul
 627              	.LVL54:
 628 0144 FFF7FEFF 		bl	__aeabi_f2d
 629              	.LVL55:
 217:Core/Src/main.c ****           }
 630              		.loc 1 217 82 view .LVU134
 631 0148 29A3     		adr	r3, .L35
 632 014a D3E90023 		ldrd	r2, [r3]
 633 014e FFF7FEFF 		bl	__aeabi_ddiv
 634              	.LVL56:
 217:Core/Src/main.c ****           }
 635              		.loc 1 217 29 view .LVU135
 636 0152 484B     		ldr	r3, .L35+132
 637 0154 C3E90001 		strd	r0, [r3]
 638              	.L28:
 229:Core/Src/main.c ****           last_l_vel = linear_vel;
 639              		.loc 1 229 11 is_stmt 1 view .LVU136
 229:Core/Src/main.c ****           last_l_vel = linear_vel;
 640              		.loc 1 229 22 is_stmt 0 view .LVU137
 641 0158 404B     		ldr	r3, .L35+108
 642 015a 1A68     		ldr	r2, [r3]	@ float
 643 015c 414B     		ldr	r3, .L35+116
 644 015e 1A60     		str	r2, [r3]	@ float
 230:Core/Src/main.c ****           vel_update_flag = FALSE;
 645              		.loc 1 230 11 is_stmt 1 view .LVU138
 230:Core/Src/main.c ****           vel_update_flag = FALSE;
 646              		.loc 1 230 22 is_stmt 0 view .LVU139
 647 0160 3F4B     		ldr	r3, .L35+112
 648 0162 1C60     		str	r4, [r3]	@ float
 231:Core/Src/main.c ****       }
 649              		.loc 1 231 11 is_stmt 1 view .LVU140
 231:Core/Src/main.c ****       }
 650              		.loc 1 231 27 is_stmt 0 view .LVU141
 651 0164 444B     		ldr	r3, .L35+136
 652 0166 0022     		movs	r2, #0
 653 0168 1A70     		strb	r2, [r3]
 654 016a 37E0     		b	.L26
 655              	.LVL57:
 656              	.L34:
 657              	.LBB7:
 244:Core/Src/main.c ****           double th = 0.18f; // Rad/s
 658              		.loc 1 244 11 is_stmt 1 view .LVU142
 245:Core/Src/main.c ****           double dt = dtick / 1000.0f;
 659              		.loc 1 245 11 view .LVU143
 246:Core/Src/main.c **** 
 660              		.loc 1 246 11 view .LVU144
 246:Core/Src/main.c **** 
 661              		.loc 1 246 29 is_stmt 0 view .LVU145
 662 016c FFF7FEFF 		bl	__aeabi_ui2f
 663              	.LVL58:
 246:Core/Src/main.c **** 
 664              		.loc 1 246 29 view .LVU146
 665 0170 4249     		ldr	r1, .L35+140
 666 0172 FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  /tmp/ccNmp05w.s 			page 24


 667              	.LVL59:
 246:Core/Src/main.c **** 
 668              		.loc 1 246 18 view .LVU147
 669 0176 FFF7FEFF 		bl	__aeabi_f2d
 670              	.LVL60:
 671 017a 0446     		mov	r4, r0
 672 017c 0D46     		mov	r5, r1
 673              	.LVL61:
 248:Core/Src/main.c ****           double delta_y = (vx * sin(th)) * dt;
 674              		.loc 1 248 11 is_stmt 1 view .LVU148
 248:Core/Src/main.c ****           double delta_y = (vx * sin(th)) * dt;
 675              		.loc 1 248 18 is_stmt 0 view .LVU149
 676 017e 1EA3     		adr	r3, .L35+8
 677 0180 D3E90023 		ldrd	r2, [r3]
 678 0184 FFF7FEFF 		bl	__aeabi_dmul
 679              	.LVL62:
 680 0188 0646     		mov	r6, r0
 681 018a 0F46     		mov	r7, r1
 682              	.LVL63:
 249:Core/Src/main.c ****           double delta_th = th * dt;
 683              		.loc 1 249 11 is_stmt 1 view .LVU150
 249:Core/Src/main.c ****           double delta_th = th * dt;
 684              		.loc 1 249 18 is_stmt 0 view .LVU151
 685 018c 1CA3     		adr	r3, .L35+16
 686 018e D3E90023 		ldrd	r2, [r3]
 687 0192 2046     		mov	r0, r4
 688 0194 2946     		mov	r1, r5
 689 0196 FFF7FEFF 		bl	__aeabi_dmul
 690              	.LVL64:
 691 019a 8046     		mov	r8, r0
 692 019c 8946     		mov	r9, r1
 693              	.LVL65:
 250:Core/Src/main.c **** 
 694              		.loc 1 250 11 is_stmt 1 view .LVU152
 250:Core/Src/main.c **** 
 695              		.loc 1 250 18 is_stmt 0 view .LVU153
 696 019e 1AA3     		adr	r3, .L35+24
 697 01a0 D3E90023 		ldrd	r2, [r3]
 698 01a4 2046     		mov	r0, r4
 699 01a6 2946     		mov	r1, r5
 700 01a8 FFF7FEFF 		bl	__aeabi_dmul
 701              	.LVL66:
 252:Core/Src/main.c **** 
 702              		.loc 1 252 11 is_stmt 1 view .LVU154
 703 01ac 344C     		ldr	r4, .L35+144
 704              	.LVL67:
 252:Core/Src/main.c **** 
 705              		.loc 1 252 11 is_stmt 0 view .LVU155
 706 01ae CDE90201 		strd	r0, [sp, #8]
 707 01b2 CDE90089 		strd	r8, [sp]
 708 01b6 3246     		mov	r2, r6
 709 01b8 3B46     		mov	r3, r7
 710 01ba 2046     		mov	r0, r4
 711              	.LVL68:
 252:Core/Src/main.c **** 
 712              		.loc 1 252 11 view .LVU156
 713 01bc FFF7FEFF 		bl	parseTxStateFrame
ARM GAS  /tmp/ccNmp05w.s 			page 25


 714              	.LVL69:
 259:Core/Src/main.c **** 
 715              		.loc 1 259 11 is_stmt 1 view .LVU157
 716 01c0 2022     		movs	r2, #32
 717 01c2 2146     		mov	r1, r4
 718 01c4 1248     		ldr	r0, .L35+32
 719 01c6 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 720              	.LVL70:
 261:Core/Src/main.c ****       }
 721              		.loc 1 261 11 view .LVU158
 261:Core/Src/main.c ****       }
 722              		.loc 1 261 21 is_stmt 0 view .LVU159
 723 01ca 214B     		ldr	r3, .L35+96
 724 01cc 1A68     		ldr	r2, [r3]
 725 01ce 214B     		ldr	r3, .L35+100
 726 01d0 1A60     		str	r2, [r3]
 727              	.LVL71:
 728              	.L30:
 261:Core/Src/main.c ****       }
 729              		.loc 1 261 21 view .LVU160
 730              	.LBE7:
 731              	.LBE6:
 202:Core/Src/main.c ****   {
 732              		.loc 1 202 3 is_stmt 1 view .LVU161
 733              	.LBB8:
 208:Core/Src/main.c ****       {    
 734              		.loc 1 208 7 view .LVU162
 208:Core/Src/main.c ****       {    
 735              		.loc 1 208 11 is_stmt 0 view .LVU163
 736 01d2 294B     		ldr	r3, .L35+136
 737 01d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 208:Core/Src/main.c ****       {    
 738              		.loc 1 208 10 view .LVU164
 739 01d6 002B     		cmp	r3, #0
 740 01d8 7FF47EAF 		bne	.L33
 741              	.L26:
 235:Core/Src/main.c ****       uint32_t dtick = tick - last_tick;
 742              		.loc 1 235 7 is_stmt 1 view .LVU165
 235:Core/Src/main.c ****       uint32_t dtick = tick - last_tick;
 743              		.loc 1 235 14 is_stmt 0 view .LVU166
 744 01dc FFF7FEFF 		bl	HAL_GetTick
 745              	.LVL72:
 235:Core/Src/main.c ****       uint32_t dtick = tick - last_tick;
 746              		.loc 1 235 12 view .LVU167
 747 01e0 1B4B     		ldr	r3, .L35+96
 748 01e2 1860     		str	r0, [r3]
 236:Core/Src/main.c ****       if (dtick > 200)
 749              		.loc 1 236 7 is_stmt 1 view .LVU168
 236:Core/Src/main.c ****       if (dtick > 200)
 750              		.loc 1 236 29 is_stmt 0 view .LVU169
 751 01e4 1B4B     		ldr	r3, .L35+100
 752 01e6 1B68     		ldr	r3, [r3]
 236:Core/Src/main.c ****       if (dtick > 200)
 753              		.loc 1 236 16 view .LVU170
 754 01e8 C01A     		subs	r0, r0, r3
 755              	.LVL73:
 237:Core/Src/main.c ****       {
ARM GAS  /tmp/ccNmp05w.s 			page 26


 756              		.loc 1 237 7 is_stmt 1 view .LVU171
 237:Core/Src/main.c ****       {
 757              		.loc 1 237 10 is_stmt 0 view .LVU172
 758 01ea C828     		cmp	r0, #200
 759 01ec F1D9     		bls	.L30
 760 01ee BDE7     		b	.L34
 761              	.L36:
 762              		.align	3
 763              	.L35:
 764 01f0 DCE14F3D 		.word	1028645340
 765 01f4 5723CA3F 		.word	1070211927
 766 01f8 C4983CD6 		.word	3594295492
 767 01fc B72FC93F 		.word	1070149559
 768 0200 672ED331 		.word	835923559
 769 0204 2755A23F 		.word	1067603239
 770 0208 00000080 		.word	2147483648
 771 020c 3D0AC73F 		.word	1070008893
 772 0210 00000000 		.word	huart1
 773 0214 00000000 		.word	rx_buffer
 774 0218 000C0140 		.word	1073810432
 775 021c 00000000 		.word	.LANCHOR4
 776 0220 3C080040 		.word	1073743932
 777 0224 00005940 		.word	1079574528
 778 0228 00000000 		.word	str_right_pid
 779 022c 00000000 		.word	str_right_motor
 780 0230 00000000 		.word	.LANCHOR5
 781 0234 40080040 		.word	1073743936
 782 0238 00000000 		.word	str_left_pid
 783 023c 00000000 		.word	str_left_motor
 784 0240 00000000 		.word	htim4
 785 0244 00000000 		.word	htim3
 786 0248 00000000 		.word	htim2
 787 024c 00000000 		.word	htim1
 788 0250 00000000 		.word	tick
 789 0254 00000000 		.word	last_tick
 790 0258 00000000 		.word	linear_vel
 791 025c 00000000 		.word	angular_vel
 792 0260 00000000 		.word	last_l_vel
 793 0264 00000000 		.word	last_a_vel
 794 0268 85EB513E 		.word	1045556101
 795 026c 00007042 		.word	1114636288
 796 0270 00000000 		.word	.LANCHOR1
 797 0274 00000000 		.word	.LANCHOR0
 798 0278 00000000 		.word	.LANCHOR3
 799 027c 00007A44 		.word	1148846080
 800 0280 00000000 		.word	tx_state_frame
 801 0284 00002E40 		.word	1076756480
 802              	.LBE8:
 803              		.cfi_endproc
 804              	.LFE68:
 806              		.comm	last_tick,4,4
 807              		.comm	tick,4,4
 808              		.comm	last_a_vel,4,4
 809              		.comm	last_l_vel,4,4
 810              		.comm	angular_vel,4,4
 811              		.comm	linear_vel,4,4
 812              		.global	vel_update_flag
ARM GAS  /tmp/ccNmp05w.s 			page 27


 813              		.global	pid_flag
 814              		.global	ready_flag
 815              		.comm	str_left_pid,80,8
 816              		.comm	str_left_motor,64,8
 817              		.comm	str_right_pid,80,8
 818              		.comm	str_right_motor,64,8
 819              		.global	left_pid_params
 820              		.global	right_pid_params
 821              		.global	left_set_speed
 822              		.global	right_set_speed
 823              		.comm	last_rx,1,1
 824              		.comm	prev_rx,1,1
 825              		.comm	tx_state_frame,32,4
 826              		.comm	data,8,4
 827              		.comm	tx_buffer,16,4
 828              		.comm	rx_buffer,16,4
 829              		.global	angular_a
 830              		.global	linear_a
 831              		.global	MSG
 832              		.section	.bss.left_set_speed,"aw",%nobits
 833              		.align	3
 834              		.set	.LANCHOR1,. + 0
 837              	left_set_speed:
 838 0000 00000000 		.space	8
 838      00000000 
 839              		.section	.bss.pid_flag,"aw",%nobits
 842              	pid_flag:
 843 0000 00       		.space	1
 844              		.section	.bss.ready_flag,"aw",%nobits
 845              		.set	.LANCHOR2,. + 0
 848              	ready_flag:
 849 0000 00       		.space	1
 850              		.section	.bss.right_set_speed,"aw",%nobits
 851              		.align	3
 852              		.set	.LANCHOR0,. + 0
 855              	right_set_speed:
 856 0000 00000000 		.space	8
 856      00000000 
 857              		.section	.bss.vel_update_flag,"aw",%nobits
 858              		.set	.LANCHOR3,. + 0
 861              	vel_update_flag:
 862 0000 00       		.space	1
 863              		.section	.data.MSG,"aw"
 864              		.align	2
 867              	MSG:
 868 0000 496E6974 		.ascii	"Init\000"
 868      00
 869 0005 00000000 		.space	495
 869      00000000 
 869      00000000 
 869      00000000 
 869      00000000 
 870              		.section	.data.angular_a,"aw"
 871              		.align	2
 874              	angular_a:
 875 0000 0A00     		.ascii	"\012\000"
 876 0002 00000000 		.space	98
ARM GAS  /tmp/ccNmp05w.s 			page 28


 876      00000000 
 876      00000000 
 876      00000000 
 876      00000000 
 877              		.section	.data.left_pid_params,"aw"
 878              		.align	3
 879              		.set	.LANCHOR5,. + 0
 882              	left_pid_params:
 883 0000 00000000 		.word	0
 884 0004 00000A40 		.word	1074397184
 885 0008 00000040 		.word	1073741824
 886 000c 3333C33F 		.word	1069757235
 887 0010 00000000 		.word	0
 888 0014 00000000 		.word	0
 889              		.section	.data.linear_a,"aw"
 890              		.align	2
 893              	linear_a:
 894 0000 0A00     		.ascii	"\012\000"
 895 0002 00000000 		.space	98
 895      00000000 
 895      00000000 
 895      00000000 
 895      00000000 
 896              		.section	.data.right_pid_params,"aw"
 897              		.align	3
 898              		.set	.LANCHOR4,. + 0
 901              	right_pid_params:
 902 0000 00000000 		.word	0
 903 0004 00000A40 		.word	1074397184
 904 0008 00000040 		.word	1073741824
 905 000c 3333C33F 		.word	1069757235
 906 0010 00000000 		.word	0
 907 0014 00000000 		.word	0
 908              		.text
 909              	.Letext0:
 910              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 911              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 912              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 913              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 914              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 915              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 916              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 917              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 918              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 919              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 920              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 921              		.file 14 "Core/Inc/tim.h"
 922              		.file 15 "Core/Inc/usart.h"
 923              		.file 16 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 924              		.file 17 "/usr/include/newlib/sys/_types.h"
 925              		.file 18 "/usr/include/newlib/sys/reent.h"
 926              		.file 19 "/usr/include/newlib/sys/lock.h"
 927              		.file 20 "Core/Inc/PID.h"
 928              		.file 21 "/usr/include/newlib/time.h"
 929              		.file 22 "/usr/include/newlib/math.h"
 930              		.file 23 "Core/Inc/frame_resolve.h"
 931              		.file 24 "Core/Inc/gpio.h"
ARM GAS  /tmp/ccNmp05w.s 			page 29


 932              		.file 25 "Core/Inc/dma.h"
 933              		.file 26 "Core/Inc/retarget.h"
ARM GAS  /tmp/ccNmp05w.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNmp05w.s:16     .text.map_speed:0000000000000000 $t
     /tmp/ccNmp05w.s:24     .text.map_speed:0000000000000000 map_speed
     /tmp/ccNmp05w.s:46     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccNmp05w.s:53     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccNmp05w.s:116    .text.HAL_TIM_PeriodElapsedCallback:0000000000000040 $d
                            *COM*:0000000000000040 str_right_motor
                            *COM*:0000000000000040 str_left_motor
     /tmp/ccNmp05w.s:125    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccNmp05w.s:132    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccNmp05w.s:240    .text.HAL_UART_RxCpltCallback:0000000000000070 $d
                            *COM*:0000000000000010 rx_buffer
                            *COM*:0000000000000001 prev_rx
                            *COM*:0000000000000001 last_rx
     /tmp/ccNmp05w.s:250    .text.Error_Handler:0000000000000000 $t
     /tmp/ccNmp05w.s:257    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccNmp05w.s:289    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccNmp05w.s:296    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccNmp05w.s:410    .text.main:0000000000000000 $t
     /tmp/ccNmp05w.s:417    .text.main:0000000000000000 main
     /tmp/ccNmp05w.s:764    .text.main:00000000000001f0 $d
                            *COM*:0000000000000050 str_right_pid
                            *COM*:0000000000000050 str_left_pid
                            *COM*:0000000000000004 tick
                            *COM*:0000000000000004 last_tick
                            *COM*:0000000000000004 linear_vel
                            *COM*:0000000000000004 angular_vel
                            *COM*:0000000000000004 last_l_vel
                            *COM*:0000000000000004 last_a_vel
                            *COM*:0000000000000020 tx_state_frame
     /tmp/ccNmp05w.s:861    .bss.vel_update_flag:0000000000000000 vel_update_flag
     /tmp/ccNmp05w.s:842    .bss.pid_flag:0000000000000000 pid_flag
     /tmp/ccNmp05w.s:848    .bss.ready_flag:0000000000000000 ready_flag
     /tmp/ccNmp05w.s:882    .data.left_pid_params:0000000000000000 left_pid_params
     /tmp/ccNmp05w.s:901    .data.right_pid_params:0000000000000000 right_pid_params
     /tmp/ccNmp05w.s:837    .bss.left_set_speed:0000000000000000 left_set_speed
     /tmp/ccNmp05w.s:855    .bss.right_set_speed:0000000000000000 right_set_speed
                            *COM*:0000000000000008 data
                            *COM*:0000000000000010 tx_buffer
     /tmp/ccNmp05w.s:874    .data.angular_a:0000000000000000 angular_a
     /tmp/ccNmp05w.s:893    .data.linear_a:0000000000000000 linear_a
     /tmp/ccNmp05w.s:867    .data.MSG:0000000000000000 MSG
     /tmp/ccNmp05w.s:833    .bss.left_set_speed:0000000000000000 $d
     /tmp/ccNmp05w.s:843    .bss.pid_flag:0000000000000000 $d
     /tmp/ccNmp05w.s:849    .bss.ready_flag:0000000000000000 $d
     /tmp/ccNmp05w.s:851    .bss.right_set_speed:0000000000000000 $d
     /tmp/ccNmp05w.s:862    .bss.vel_update_flag:0000000000000000 $d
     /tmp/ccNmp05w.s:864    .data.MSG:0000000000000000 $d
     /tmp/ccNmp05w.s:871    .data.angular_a:0000000000000000 $d
     /tmp/ccNmp05w.s:878    .data.left_pid_params:0000000000000000 $d
     /tmp/ccNmp05w.s:890    .data.linear_a:0000000000000000 $d
     /tmp/ccNmp05w.s:897    .data.right_pid_params:0000000000000000 $d

UNDEFINED SYMBOLS
PID_PreProcess
PID_ComputeOutput
ARM GAS  /tmp/ccNmp05w.s 			page 31


PID_SetDuty
htim1
HAL_UART_Receive_DMA
huart1
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_fcmpeq
__aeabi_fmul
__aeabi_fsub
__aeabi_f2d
__aeabi_ddiv
__aeabi_fadd
__aeabi_ui2f
__aeabi_fdiv
__aeabi_dmul
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_TIM1_Init
MX_TIM2_Init
MX_TIM3_Init
MX_TIM4_Init
MX_USART1_UART_Init
RetargetInit
PID_MotorInit
HAL_TIM_PWM_Start
HAL_TIM_Encoder_Start
HAL_TIM_Base_Start_IT
HAL_GetTick
resolveRxFrame
parseTxStateFrame
HAL_UART_Transmit_DMA
htim4
htim3
htim2
